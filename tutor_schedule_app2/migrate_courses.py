"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∫—É—Ä—Å–æ–≤
"""

import sqlite3
import os
from contextlib import contextmanager
import config

@contextmanager
def db_connection():
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
    conn = sqlite3.connect(config.DB_NAME)
    try:
        yield conn
        conn.commit()
    except Exception as e:
        conn.rollback()
        raise e
    finally:
        conn.close()

def check_courses_tables():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è –∫—É—Ä—Å–æ–≤"""
    tables_to_check = [
        'courses',
        'course_modules', 
        'course_lessons',
        'course_materials',
        'course_assignments',
        'course_enrollments',
        'course_submissions'
    ]
    
    with db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        existing_tables = [row[0] for row in cursor.fetchall()]
        
        missing_tables = [table for table in tables_to_check if table not in existing_tables]
        return len(missing_tables) == 0, missing_tables

def create_courses_tables():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∫—É—Ä—Å–æ–≤"""
    print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∫—É—Ä—Å–æ–≤...")
    
    sql_statements = [
        # –¢–∞–±–ª–∏—Ü–∞ –∫—É—Ä—Å–æ–≤
        """
        CREATE TABLE IF NOT EXISTS courses (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL,
            description TEXT,
            tutor_id INTEGER NOT NULL,
            is_active BOOLEAN DEFAULT 1,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (tutor_id) REFERENCES users (id)
        );
        """,
        
        # –¢–∞–±–ª–∏—Ü–∞ –º–æ–¥—É–ª–µ–π –∫—É—Ä—Å–∞
        """
        CREATE TABLE IF NOT EXISTS course_modules (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            course_id INTEGER NOT NULL,
            title TEXT NOT NULL,
            description TEXT,
            order_index INTEGER DEFAULT 0,
            is_active BOOLEAN DEFAULT 1,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (course_id) REFERENCES courses (id) ON DELETE CASCADE
        );
        """,
        
        # –¢–∞–±–ª–∏—Ü–∞ —É—Ä–æ–∫–æ–≤
        """
        CREATE TABLE IF NOT EXISTS course_lessons (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            module_id INTEGER NOT NULL,
            title TEXT NOT NULL,
            content TEXT,
            order_index INTEGER DEFAULT 0,
            is_active BOOLEAN DEFAULT 1,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (module_id) REFERENCES course_modules (id) ON DELETE CASCADE
        );
        """,
        
        # –¢–∞–±–ª–∏—Ü–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —É—Ä–æ–∫–∞
        """
        CREATE TABLE IF NOT EXISTS course_materials (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            lesson_id INTEGER NOT NULL,
            title TEXT NOT NULL,
            material_type TEXT NOT NULL,
            file_path TEXT NOT NULL,
            file_size INTEGER,
            original_filename TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (lesson_id) REFERENCES course_lessons (id) ON DELETE CASCADE
        );
        """,
        
        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–¥–∞–Ω–∏–π
        """
        CREATE TABLE IF NOT EXISTS course_assignments (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            lesson_id INTEGER NOT NULL,
            title TEXT NOT NULL,
            description TEXT NOT NULL,
            assignment_type TEXT DEFAULT 'text',
            is_required BOOLEAN DEFAULT 1,
            max_points INTEGER DEFAULT 100,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (lesson_id) REFERENCES course_lessons (id) ON DELETE CASCADE
        );
        """,
        
        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏–π —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–∞ –∫—É—Ä—Å—ã
        """
        CREATE TABLE IF NOT EXISTS course_enrollments (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            course_id INTEGER NOT NULL,
            student_id INTEGER NOT NULL,
            enrolled_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            is_active BOOLEAN DEFAULT 1,
            progress_percentage REAL DEFAULT 0.0,
            FOREIGN KEY (course_id) REFERENCES courses (id) ON DELETE CASCADE,
            FOREIGN KEY (student_id) REFERENCES students (id) ON DELETE CASCADE,
            UNIQUE(course_id, student_id)
        );
        """,
        
        # Ta–±–ª–∏—Ü–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
        """
        CREATE TABLE IF NOT EXISTS course_submissions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            assignment_id INTEGER NOT NULL,
            enrollment_id INTEGER NOT NULL,
            content TEXT,
            file_path TEXT,
            submitted_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            is_checked BOOLEAN DEFAULT 0,
            points INTEGER,
            tutor_feedback TEXT,
            checked_at DATETIME,
            FOREIGN KEY (assignment_id) REFERENCES course_assignments (id) ON DELETE CASCADE,
            FOREIGN KEY (enrollment_id) REFERENCES course_enrollments (id) ON DELETE CASCADE
        );
        """
    ]
    
    try:
        with db_connection() as conn:
            cursor = conn.cursor()
            
            for sql in sql_statements:
                cursor.execute(sql)
            
            print("‚úÖ –¢–∞–±–ª–∏—Ü—ã –∫—É—Ä—Å–æ–≤ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
        return False

def migrate_courses():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("=== –ú–∏–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∫—É—Ä—Å–æ–≤ ===")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ë–î
    if not os.path.exists(config.DB_NAME):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {config.DB_NAME} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ create_admin.py –∏–ª–∏ migrate_db.py")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü –∫—É—Ä—Å–æ–≤
    tables_exist, missing_tables = check_courses_tables()
    
    if tables_exist:
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã –∫—É—Ä—Å–æ–≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
        return True
    
    print(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã: {', '.join(missing_tables)}")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    if create_courses_tables():
        print("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∫—É—Ä—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:")
        print("- –°–æ–∑–¥–∞–≤–∞—Ç—å –∫—É—Ä—Å—ã —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
        print("- –î–æ–±–∞–≤–ª—è—Ç—å –º–æ–¥—É–ª–∏ –∏ —É—Ä–æ–∫–∏")
        print("- –ó–∞–≥—Ä—É–∂–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã")
        print("- –ù–∞–∑–Ω–∞—á–∞—Ç—å –∫—É—Ä—Å—ã —Å—Ç—É–¥–µ–Ω—Ç–∞–º")
        return True
    else:
        print("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
        return False

if __name__ == '__main__':
    migrate_courses()