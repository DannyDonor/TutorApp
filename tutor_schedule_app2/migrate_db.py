"""
–°–∏—Å—Ç–µ–º–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö TutorApp
"""

import sqlite3
import os
import shutil
import config
from datetime import datetime
from sqlalchemy import create_engine, text
from sqlalchemy.exc import SQLAlchemyError

def backup_database():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    if os.path.exists(config.DB_NAME):
        backup_name = f"{config.DB_NAME}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        shutil.copy2(config.DB_NAME, backup_name)
        print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_name}")
        return backup_name
    return None

def check_database_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect(config.DB_NAME)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ tutor_id –≤ —Ç–∞–±–ª–∏—Ü–µ students
        cursor.execute("PRAGMA table_info(students)")
        columns = [row[1] for row in cursor.fetchall()]
        
        needs_migration = False
        missing_columns = []
        
        if 'tutor_id' not in columns:
            missing_columns.append('tutor_id')
            needs_migration = True
        
        conn.close()
        
        return needs_migration, missing_columns
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î: {e}")
        return True, ['unknown_error']

def apply_migrations():
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect(config.DB_NAME)
        cursor = conn.cursor()
        
        print("üìù –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...")
        
        # –ú–∏–≥—Ä–∞—Ü–∏—è 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è tutor_id –≤ —Ç–∞–±–ª–∏—Ü—É students
        try:
            cursor.execute("ALTER TABLE students ADD COLUMN tutor_id INTEGER")
            print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ tutor_id –≤ —Ç–∞–±–ª–∏—Ü—É students")
        except sqlite3.OperationalError as e:
            if "duplicate column name" in str(e).lower():
                print("‚ÑπÔ∏è –ü–æ–ª–µ tutor_id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                raise e
        
        # –ú–∏–≥—Ä–∞—Ü–∏—è 2: –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è tutor_id
        try:
            cursor.execute("CREATE INDEX IF NOT EXISTS idx_students_tutor_id ON students(tutor_id)")
            print("‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å –¥–ª—è tutor_id")
        except sqlite3.OperationalError as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å: {e}")
        
        conn.commit()
        conn.close()
        
        print("‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
        return False

def recreate_database():
    """–ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –Ω—É–ª—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        backup_file = backup_database()
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ë–î
        if os.path.exists(config.DB_NAME):
            os.remove(config.DB_NAME)
            print("üóëÔ∏è –°—Ç–∞—Ä–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ë–î
        from database import engine, Base
        Base.metadata.create_all(engine)
        print("‚úÖ –ù–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        if backup_file and os.path.exists(backup_file):
            print(f"\nüìã –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞: {backup_file}")
            print("   –í—ã –º–æ–∂–µ—Ç–µ –≤—Ä—É—á–Ω—É—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏.")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –ë–î: {e}")
        return False

def interactive_migration():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è —Å –¥–∏–∞–ª–æ–≥–æ–≤—ã–º–∏ –æ–∫–Ω–∞–º–∏"""
    print("=" * 60)
    print("üîß –°–ò–°–¢–ï–ú–ê –ú–ò–ì–†–ê–¶–ò–ò –ë–ê–ó–´ –î–ê–ù–ù–´–• TutorApp")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –ë–î
    needs_migration, missing_columns = check_database_structure()
    
    if not needs_migration:
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç—É–∞–ª—å–Ω–∞, –º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
        return True
    
    print("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!")
    print(f"   –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è: {', '.join(missing_columns)}")
    print()
    
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:")
    print("1. üîÑ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ë–î)")
    print("2. üÜï –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –ë–î —Å –Ω—É–ª—è (–≤—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã, –Ω–æ —Å–æ–∑–¥–∞—Å—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è)")
    print("3. ‚ùå –û—Ç–º–µ–Ω–∞ (–æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å)")
    print()
    
    while True:
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç (1/2/3): ").strip()
        
        if choice == '1':
            print("\nüîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...")
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –º–∏–≥—Ä–∞—Ü–∏–µ–π
            backup_file = backup_database()
            
            if apply_migrations():
                print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                print("   –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")
                return True
            else:
                print("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å!")
                if backup_file:
                    print(f"   –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_file}")
                return False
                
        elif choice == '2':
            print("\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã!")
            confirm = input("–í—ã —É–≤–µ—Ä–µ–Ω—ã? –í–≤–µ–¥–∏—Ç–µ '–î–ê' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ").strip()
            
            if confirm.upper() == '–î–ê':
                print("\nüÜï –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
                if recreate_database():
                    print("\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞!")
                    print("   –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")
                    return True
                else:
                    return False
            else:
                print("   –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                continue
                
        elif choice == '3':
            print("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            print("   –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ!")
            return False
            
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def quick_fix():
    """–ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–µ–∑ –¥–∏–∞–ª–æ–≥–æ–≤ (–¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)"""
    needs_migration, missing_columns = check_database_structure()
    
    if not needs_migration:
        return True
    
    print("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –ü—Ä–∏–º–µ–Ω—è—é –±—ã—Å—Ç—Ä—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")
    
    backup_file = backup_database()
    
    if apply_migrations():
        print("‚úÖ –ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("‚ùå –ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è.")
        return False

if __name__ == '__main__':
    interactive_migration()