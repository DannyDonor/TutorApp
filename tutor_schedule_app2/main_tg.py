import telebot
from telebot import types
from database import Session, Student, Lesson, Tutor, Parent, Homework, Payment, User, Invitation
import config
from datetime import datetime, timedelta
from contextlib import contextmanager
from sqlalchemy.exc import SQLAlchemyError
import secrets
import time
from threading import Thread

bot = telebot.TeleBot(config.BOT_TOKEN)

@contextmanager
def session_scope():
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏–µ–π –ë–î"""
    session = Session()
    try:
        yield session
        session.commit()
    except SQLAlchemyError as e:
        session.rollback()
        raise e
    finally:
        session.close()

def send_notification(chat_id, message, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        bot.send_message(chat_id, message, reply_markup=reply_markup, parse_mode='HTML')
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")

def send_student_invitation(student_id, email):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    with session_scope() as session:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
        invitation = Invitation(
            email=email,
            role='student',
            student_id=student_id,
            created_by=1,  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Å–æ–∑–¥–∞–µ—Ç –∞–¥–º–∏–Ω
            expires_at=datetime.now() + timedelta(days=7)
        )
        invitation.generate_token()
        session.add(invitation)
        session.commit()
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É email —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        print(f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {student_id}: {invitation.token}")

# ================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –°–¢–£–î–ï–ù–¢–û–í ==================

@bot.message_handler(commands=['start'])
def handle_start(message):
    chat_id = str(message.chat.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –ª–∏ —ç—Ç–æ
    if message.from_user.username == config.TUTOR_ID:
        with session_scope() as session:
            existing_tutor = session.query(Tutor).filter_by(chat_id=chat_id).first()
            if not existing_tutor:
                tutor = Tutor(chat_id=chat_id)
                session.add(tutor)
        send_tutor_menu(message.chat.id)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç—É–¥–µ–Ω—Ç –ª–∏ —ç—Ç–æ
    with session_scope() as session:
        student = session.query(Student).filter_by(telegram_chat_id=chat_id).first()
        if student:
            if student.receive_notifications:
                send_student_menu(message.chat.id, student)
            else:
                send_notification(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã. –ß—Ç–æ–±—ã –∏—Ö –≤–∫–ª—é—á–∏—Ç—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É.")
        else:
            send_notification(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –≤–∞—à–µ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å –≤ —Å–∏—Å—Ç–µ–º—É.")

def send_student_menu(chat_id, student=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    if not student:
        with session_scope() as session:
            student = session.query(Student).filter_by(telegram_chat_id=str(chat_id)).first()
    
    if not student:
        send_notification(chat_id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É.")
        return
    
    markup = types.InlineKeyboardMarkup(row_width=2)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    btn_lessons = types.InlineKeyboardButton("üìö –ú–æ–∏ —É—Ä–æ–∫–∏", callback_data=f"student_lessons_{student.id}")
    btn_homework = types.InlineKeyboardButton("üìù –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è", callback_data=f"student_homework_{student.id}")
    btn_schedule = types.InlineKeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"student_schedule_{student.id}")
    btn_progress = types.InlineKeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data=f"student_progress_{student.id}")
    
    markup.add(btn_lessons, btn_homework)
    markup.add(btn_schedule, btn_progress)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    btn_notifications = types.InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data=f"student_notifications_{student.id}")
    btn_help = types.InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="student_help")
    
    markup.add(btn_notifications, btn_help)
    
    welcome_text = f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {student.full_name}!\n\n"
    welcome_text += "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:"
    
    send_notification(chat_id, welcome_text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('student_lessons_'))
def handle_student_lessons(call):
    student_id = int(call.data.split('_')[2])
    
    with session_scope() as session:
        student = session.query(Student).get(student_id)
        if not student or student.telegram_chat_id != str(call.message.chat.id):
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —É—Ä–æ–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
        lessons = session.query(Lesson).filter_by(student_id=student_id).order_by(Lesson.date_time.desc()).limit(10).all()
        
        if not lessons:
            text = "üìö –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤."
        else:
            text = f"üìö –í–∞—à–∏ —É—Ä–æ–∫–∏:\n\n"
            for lesson in lessons:
                status_emoji = {
                    '–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω': 'üïê',
                    '–ø—Ä–æ–≤–µ–¥–µ–Ω': '‚úÖ',
                    '–æ—Ç–º–µ–Ω–µ–Ω': '‚ùå',
                    '–Ω–µ_–ø—Ä–∏—à–µ–ª': 'üö´'
                }.get(lesson.status, '‚ùì')
                
                date_str = lesson.date_time.strftime('%d.%m.%Y %H:%M')
                text += f"{status_emoji} {date_str} - {lesson.status}\n"
                if lesson.topic_covered:
                    text += f"   üìñ –¢–µ–º–∞: {lesson.topic_covered}\n"
                if lesson.video_link:
                    text += f"   üé• –í–∏–¥–µ–æ: {lesson.video_link}\n"
                text += "\n"
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"student_menu_{student_id}"))
        
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('student_homework_'))
def handle_student_homework(call):
    student_id = int(call.data.split('_')[2])
    
    with session_scope() as session:
        student = session.query(Student).get(student_id)
        if not student or student.telegram_chat_id != str(call.message.chat.id):
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
        homeworks = session.query(Homework).filter_by(student_id=student_id).order_by(Homework.due_date.asc()).all()
        
        if not homeworks:
            text = "üìù –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π."
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"student_menu_{student_id}"))
        else:
            text = f"üìù –í–∞—à–∏ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:\n\n"
            markup = types.InlineKeyboardMarkup(row_width=1)
            
            for hw in homeworks:
                if hw.is_confirmed_by_tutor:
                    status = "‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ"
                elif hw.submitted_date:
                    status = "‚è≥ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ"
                else:
                    status = "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
                
                due_date = hw.due_date.strftime('%d.%m.%Y') if hw.due_date else "–ë–µ–∑ —Å—Ä–æ–∫–∞"
                text += f"{status} | {due_date}\n"
                text += f"üìã {hw.description}\n"
                
                if hw.student_comment:
                    text += f"üí¨ –í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {hw.student_comment}\n"
                
                # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏–µ–º
                if not hw.submitted_date:
                    markup.add(types.InlineKeyboardButton(
                        f"üì§ –°–¥–∞—Ç—å: {hw.description[:30]}...", 
                        callback_data=f"submit_hw_{hw.id}"
                    ))
                
                text += "\n"
            
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"student_menu_{student_id}"))
        
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('submit_hw_'))
def handle_submit_homework(call):
    homework_id = int(call.data.split('_')[2])
    
    with session_scope() as session:
        homework = session.query(Homework).get(homework_id)
        if not homework or homework.student.telegram_chat_id != str(call.message.chat.id):
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞")
            return
        
        if homework.submitted_date:
            bot.answer_callback_query(call.id, "–≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É")
            return
        
        text = f"üìù –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è:\n\n"
        text += f"üìã –ó–∞–¥–∞–Ω–∏–µ: {homework.description}\n\n"
        text += "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–º—É –∑–∞–¥–∞–Ω–∏—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:"
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"student_homework_{homework.student_id}"))
        
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        bot.register_next_step_handler(call.message, process_homework_comment, homework_id)

def process_homework_comment(message, homework_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –¥–æ–º–∞—à–Ω–µ–º—É –∑–∞–¥–∞–Ω–∏—é"""
    if message.text == '/skip':
        comment = ""
    else:
        comment = message.text
    
    with session_scope() as session:
        homework = session.query(Homework).get(homework_id)
        if homework and homework.student.telegram_chat_id == str(message.chat.id):
            homework.student_comment = comment
            homework.submitted_date = datetime.now()
            homework.is_completed = True
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
            comment_text = f"\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}" if comment else ""
            send_notification(config.TUTOR_ID, 
                f"üì§ –°—Ç—É–¥–µ–Ω—Ç {homework.student.full_name} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:\n"
                f"'{homework.description}'{comment_text}\n\n"
                f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º–µ.")
            
            send_notification(message.chat.id, "‚úÖ –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π
            send_student_menu(message.chat.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('student_schedule_'))
def handle_student_schedule(call):
    student_id = int(call.data.split('_')[2])
    
    with session_scope() as session:
        student = session.query(Student).get(student_id)
        if not student or student.telegram_chat_id != str(call.message.chat.id):
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–µ —É—Ä–æ–∫–∏
        now = datetime.now()
        upcoming_lessons = session.query(Lesson).filter(
            Lesson.student_id == student_id,
            Lesson.date_time > now,
            Lesson.status == '–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω'
        ).order_by(Lesson.date_time.asc()).limit(10).all()
        
        if not upcoming_lessons:
            text = "üìÖ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤."
        else:
            text = f"üìÖ –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n"
            for lesson in upcoming_lessons:
                date_str = lesson.date_time.strftime('%d.%m.%Y %H:%M')
                days_until = (lesson.date_time.date() - now.date()).days
                
                if days_until == 0:
                    time_info = "—Å–µ–≥–æ–¥–Ω—è"
                elif days_until == 1:
                    time_info = "–∑–∞–≤—Ç—Ä–∞"
                else:
                    time_info = f"—á–µ—Ä–µ–∑ {days_until} –¥–Ω."
                
                text += f"üìö {date_str} ({time_info})\n"
                if lesson.next_lesson_date:
                    next_date = lesson.next_lesson_date.strftime('%d.%m.%Y %H:%M')
                    text += f"   ‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫: {next_date}\n"
                text += "\n"
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"student_menu_{student_id}"))
        
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('student_progress_'))
def handle_student_progress(call):
    student_id = int(call.data.split('_')[2])
    
    with session_scope() as session:
        student = session.query(Student).get(student_id)
        if not student or student.telegram_chat_id != str(call.message.chat.id):
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞")
            return
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Ä–æ–∫–æ–≤
        total_lessons = session.query(Lesson).filter_by(student_id=student_id).count()
        completed_lessons = session.query(Lesson).filter_by(student_id=student_id, status='–ø—Ä–æ–≤–µ–¥–µ–Ω').count()
        missed_lessons = session.query(Lesson).filter_by(student_id=student_id, status='–Ω–µ_–ø—Ä–∏—à–µ–ª').count()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π
        total_homeworks = session.query(Homework).filter_by(student_id=student_id).count()
        completed_homeworks = session.query(Homework).filter_by(student_id=student_id, is_confirmed_by_tutor=True).count()
        pending_homeworks = session.query(Homework).filter(
            Homework.student_id == student_id,
            Homework.submitted_date.isnot(None),
            Homework.is_confirmed_by_tutor == False
        ).count()
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏
        recent_payments = session.query(Payment).filter_by(student_id=student_id).order_by(Payment.payment_date.desc()).limit(3).all()
        
        text = f"üìä –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:\n\n"
        text += f"üìö –£—Ä–æ–∫–∏:\n"
        text += f"   ‚Ä¢ –í—Å–µ–≥–æ: {total_lessons}\n"
        text += f"   ‚Ä¢ –ü—Ä–æ–≤–µ–¥–µ–Ω–æ: {completed_lessons}\n"
        text += f"   ‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ: {missed_lessons}\n\n"
        
        text += f"üìù –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:\n"
        text += f"   ‚Ä¢ –í—Å–µ–≥–æ: {total_homeworks}\n"
        text += f"   ‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_homeworks}\n"
        text += f"   ‚Ä¢ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: {pending_homeworks}\n\n"
        
        if recent_payments:
            text += f"üí∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏:\n"
            for payment in recent_payments:
                date_str = payment.payment_date.strftime('%d.%m.%Y')
                text += f"   ‚Ä¢ {date_str}: {payment.amount} —Ä—É–±.\n"
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"student_menu_{student_id}"))
        
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('student_notifications_'))
def handle_student_notifications(call):
    student_id = int(call.data.split('_')[2])
    
    with session_scope() as session:
        student = session.query(Student).get(student_id)
        if not student or student.telegram_chat_id != str(call.message.chat.id):
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞")
            return
        
        current_status = "–≤–∫–ª—é—á–µ–Ω—ã" if student.receive_notifications else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
        
        text = f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–µ–π—á–∞—Å {current_status}.\n\n"
        text += "–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:\n"
        text += "‚Ä¢ –ù–æ–≤—ã—Ö —É—Ä–æ–∫–∞—Ö\n"
        text += "‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö –æ –∑–∞–Ω—è—Ç–∏—è—Ö\n"
        text += "‚Ä¢ –î–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏—è—Ö\n"
        text += "‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏\n\n"
        text += "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
        
        markup = types.InlineKeyboardMarkup()
        if student.receive_notifications:
            markup.add(types.InlineKeyboardButton("üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data=f"toggle_notifications_{student_id}"))
        else:
            markup.add(types.InlineKeyboardButton("üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data=f"toggle_notifications_{student_id}"))
        
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"student_menu_{student_id}"))
        
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('toggle_notifications_'))
def handle_toggle_notifications(call):
    student_id = int(call.data.split('_')[2])
    
    with session_scope() as session:
        student = session.query(Student).get(student_id)
        if not student or student.telegram_chat_id != str(call.message.chat.id):
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞")
            return
        
        student.receive_notifications = not student.receive_notifications
        session.commit()
        
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if student.receive_notifications else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
        bot.answer_callback_query(call.id, f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        handle_student_notifications(call)

@bot.callback_query_handler(func=lambda call: call.data == 'student_help')
def handle_student_help(call):
    text = """‚ùì –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

üìö <b>–ú–æ–∏ —É—Ä–æ–∫–∏</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–Ω—è—Ç–∏–π
üìù <b>–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è</b> - —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å
üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b> - –±–ª–∏–∂–∞–π—à–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∏
üìä <b>–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å</b> - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–∫–∞–º –∏ –∑–∞–¥–∞–Ω–∏—è–º
üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b> - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/menu - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é

<b>–ö–∞–∫ —Å–¥–∞—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:</b>
1. –í—ã–±–µ—Ä–∏—Ç–µ "–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"
2. –ù–∞–∂–º–∏—Ç–µ "–°–¥–∞—Ç—å" —É –Ω—É–∂–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
3. –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ /skip
4. –ó–∞–¥–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É

–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –≤–∞—à–µ–º—É —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É."""
    
    markup = types.InlineKeyboardMarkup()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º student_id –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    with session_scope() as session:
        student = session.query(Student).filter_by(telegram_chat_id=str(call.message.chat.id)).first()
        if student:
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"student_menu_{student.id}"))
    
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup, parse_mode='HTML')

@bot.callback_query_handler(func=lambda call: call.data.startswith('student_menu_'))
def handle_student_menu(call):
    student_id = int(call.data.split('_')[2])
    
    with session_scope() as session:
        student = session.query(Student).get(student_id)
        if student and student.telegram_chat_id == str(call.message.chat.id):
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send_student_menu(call.message.chat.id, student)

# ================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –†–ï–ü–ï–¢–ò–¢–û–†–û–í ==================

def send_tutor_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('üìù –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤')
    btn2 = types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞')
    btn3 = types.KeyboardButton('üìÖ –°–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç–∏–π (–±–æ—Ç)')
    btn4 = types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ (–±–æ—Ç)')
    btn5 = types.KeyboardButton('üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è')
    markup.add(btn1, btn2, btn3, btn4, btn5)
    send_notification(
        chat_id,
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—Å—Ç–≤–æ–º!\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ –∏ –∑–∞–Ω—è—Ç–∏—è–º–∏ –ø—Ä—è–º–æ –∑–¥–µ—Å—å.",
        reply_markup=markup
    )

@bot.message_handler(commands=['menu'])
def show_menu(message):
    chat_id = str(message.chat.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –ª–∏ —ç—Ç–æ
    if message.from_user.username == config.TUTOR_ID:
        send_tutor_menu(message.chat.id)
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç—É–¥–µ–Ω—Ç –ª–∏ —ç—Ç–æ
        with session_scope() as session:
            student = session.query(Student).filter_by(telegram_chat_id=chat_id).first()
            if student:
                send_student_menu(message.chat.id, student)
            else:
                send_notification(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–Ω—é. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É.")

# ================== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –†–ï–ü–ï–¢–ò–¢–û–†–û–í ==================

@bot.message_handler(func=lambda message: message.text == 'üìù –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤')
def list_students_telebot(message):
    if message.from_user.username != config.TUTOR_ID:
        send_notification(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    with session_scope() as session:
        students = session.query(Student).filter_by(is_archived=False).order_by(Student.full_name).all()
        
        if not students:
            send_notification(message.chat.id, "–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç.")
            return
        
        text = "üìù –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:\n\n"
        for student in students:
            notification_status = "üîî" if student.receive_notifications else "üîï"
            text += f"{notification_status} {student.full_name}\n"
            text += f"   ID: {student.id}\n"
            text += f"   Telegram: {student.telegram_chat_id or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            text += f"   –£—Ä–æ–∫–æ–≤: {student.lessons_count}\n\n"
        
        send_notification(message.chat.id, text)

@bot.message_handler(func=lambda message: message.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞')
def add_student_telebot(message):
    if message.from_user.username != config.TUTOR_ID:
        send_notification(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    send_notification(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ò–º—è –§–∞–º–∏–ª–∏—è | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤ | Telegram ID (–∏–ª–∏ 0)")
    bot.register_next_step_handler(message, process_add_student)

def process_add_student(message):
    try:
        parts = message.text.split('|')
        if len(parts) != 3:
            send_notification(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ò–º—è –§–∞–º–∏–ª–∏—è | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤ | Telegram ID")
            return
        
        full_name = parts[0].strip()
        lessons_count = int(parts[1].strip())
        telegram_id = parts[2].strip()
        
        if telegram_id == '0':
            telegram_id = None
        
        with session_scope() as session:
            student = Student(
                full_name=full_name,
                lessons_count=lessons_count,
                telegram_chat_id=telegram_id,
                receive_notifications=True
            )
            session.add(student)
            session.commit()
            
            send_notification(message.chat.id, f"‚úÖ –°—Ç—É–¥–µ–Ω—Ç {full_name} –¥–æ–±–∞–≤–ª–µ–Ω!")
    
    except ValueError:
        send_notification(message.chat.id, "–û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    except Exception as e:
        send_notification(message.chat.id, f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞: {e}")

@bot.message_handler(func=lambda message: message.text == 'üìÖ –°–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç–∏–π (–±–æ—Ç)')
def list_lessons_telebot(message):
    if message.from_user.username != config.TUTOR_ID:
        send_notification(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    with session_scope() as session:
        lessons = session.query(Lesson).order_by(Lesson.date_time.desc()).limit(20).all()
        
        if not lessons:
            send_notification(message.chat.id, "–°–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç–∏–π –ø—É—Å—Ç.")
            return
        
        text = "üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è:\n\n"
        for lesson in lessons:
            status_emoji = {
                '–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω': 'üïê',
                '–ø—Ä–æ–≤–µ–¥–µ–Ω': '‚úÖ',
                '–æ—Ç–º–µ–Ω–µ–Ω': '‚ùå',
                '–Ω–µ_–ø—Ä–∏—à–µ–ª': 'üö´'
            }.get(lesson.status, '‚ùì')
            
            date_str = lesson.date_time.strftime('%d.%m.%Y %H:%M')
            text += f"{status_emoji} {date_str}\n"
            text += f"   üë§ {lesson.student.full_name}\n"
            text += f"   üìä {lesson.status}\n"
            if lesson.topic_covered:
                text += f"   üìñ {lesson.topic_covered}\n"
            text += "\n"
        
        send_notification(message.chat.id, text)

@bot.message_handler(func=lambda message: message.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ (–±–æ—Ç)')
def add_lesson_telebot(message):
    if message.from_user.username != config.TUTOR_ID:
        send_notification(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    with session_scope() as session:
        students = session.query(Student).filter_by(is_archived=False).order_by(Student.full_name).all()
        
        if not students:
            send_notification(message.chat.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è.")
            return
        
        text = "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è:\n\n"
        for student in students:
            text += f"ID {student.id}: {student.full_name}\n"
        
        text += "\n–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nID —Å—Ç—É–¥–µ–Ω—Ç–∞ | –¥–∞—Ç–∞ –≤—Ä–µ–º—è (–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú)"
        
        send_notification(message.chat.id, text)
        bot.register_next_step_handler(message, process_add_lesson)

def process_add_lesson(message):
    try:
        parts = message.text.split('|')
        if len(parts) != 2:
            send_notification(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ID —Å—Ç—É–¥–µ–Ω—Ç–∞ | –¥–∞—Ç–∞ –≤—Ä–µ–º—è")
            return
        
        student_id = int(parts[0].strip())
        datetime_str = parts[1].strip()
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        lesson_datetime = datetime.strptime(datetime_str, '%d.%m.%Y %H:%M')
        
        with session_scope() as session:
            student = session.get(Student, student_id)
            if not student:
                send_notification(message.chat.id, "–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            lesson = Lesson(
                student_id=student_id,
                date_time=lesson_datetime,
                status='–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω'
            )
            session.add(lesson)
            session.commit()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
            if student.telegram_chat_id and student.receive_notifications:
                lesson_time = lesson_datetime.strftime('%d.%m.%Y –≤ %H:%M')
                send_notification(
                    student.telegram_chat_id,
                    f"üìö –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ!\n\n"
                    f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {lesson_time}\n"
                    f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è!"
                )
            
            send_notification(message.chat.id, f"‚úÖ –ó–∞–Ω—è—Ç–∏–µ —Å {student.full_name} –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ {datetime_str}")
    
    except ValueError:
        send_notification(message.chat.id, "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")
    except Exception as e:
        send_notification(message.chat.id, f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è: {e}")

@bot.message_handler(func=lambda message: message.text == 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è')
def today_schedule_telebot(message):
    chat_id = str(message.chat.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –ª–∏ —ç—Ç–æ
    if message.from_user.username == config.TUTOR_ID:
        with session_scope() as session:
            today = datetime.now().date()
            lessons = session.query(Lesson).filter(
                func.date(Lesson.date_time) == today
            ).order_by(Lesson.date_time).all()
            
            if not lessons:
                send_notification(message.chat.id, "üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç.")
                return
            
            text = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {today.strftime('%d.%m.%Y')}:\n\n"
            for lesson in lessons:
                status_emoji = {
                    '–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω': 'üïê',
                    '–ø—Ä–æ–≤–µ–¥–µ–Ω': '‚úÖ',
                    '–æ—Ç–º–µ–Ω–µ–Ω': '‚ùå',
                    '–Ω–µ_–ø—Ä–∏—à–µ–ª': 'üö´'
                }.get(lesson.status, '‚ùì')
                
                time_str = lesson.date_time.strftime('%H:%M')
                text += f"{status_emoji} {time_str} - {lesson.student.full_name}\n"
                text += f"   üìä –°—Ç–∞—Ç—É—Å: {lesson.status}\n"
                if lesson.topic_covered:
                    text += f"   üìñ –¢–µ–º–∞: {lesson.topic_covered}\n"
                text += "\n"
            
            send_notification(message.chat.id, text)
    else:
        # –î–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        with session_scope() as session:
            student = session.query(Student).filter_by(telegram_chat_id=chat_id).first()
            if not student:
                send_notification(message.chat.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
                return
            
            today = datetime.now().date()
            lessons = session.query(Lesson).filter(
                Lesson.student_id == student.id,
                func.date(Lesson.date_time) == today
            ).order_by(Lesson.date_time).all()
            
            if not lessons:
                send_notification(message.chat.id, "üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π.")
                return
            
            text = f"üìÖ –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {today.strftime('%d.%m.%Y')}:\n\n"
            for lesson in lessons:
                status_emoji = {
                    '–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω': 'üïê',
                    '–ø—Ä–æ–≤–µ–¥–µ–Ω': '‚úÖ',
                    '–æ—Ç–º–µ–Ω–µ–Ω': '‚ùå',
                    '–Ω–µ_–ø—Ä–∏—à–µ–ª': 'üö´'
                }.get(lesson.status, '‚ùì')
                
                time_str = lesson.date_time.strftime('%H:%M')
                text += f"{status_emoji} {time_str}\n"
                text += f"   üìä –°—Ç–∞—Ç—É—Å: {lesson.status}\n"
                if lesson.topic_covered:
                    text += f"   üìñ –¢–µ–º–∞: {lesson.topic_covered}\n"
                if lesson.video_link:
                    text += f"   üé• –í–∏–¥–µ–æ: {lesson.video_link}\n"
                text += "\n"
            
            send_notification(message.chat.id, text)

@bot.message_handler(commands=['cancel_lesson'])
def cancel_lesson(message):
    if message.from_user.username != config.TUTOR_ID:
        send_notification(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID —É—Ä–æ–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    try:
        lesson_id = int(message.text.split()[1])
        
        with session_scope() as session:
            lesson = session.get(Lesson, lesson_id)
            if not lesson:
                send_notification(message.chat.id, "–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            lesson.status = '–æ—Ç–º–µ–Ω–µ–Ω'
            session.commit()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
            student = lesson.student
            if student.telegram_chat_id and student.receive_notifications:
                lesson_time = lesson.date_time.strftime('%d.%m.%Y –≤ %H:%M')
                send_notification(
                    student.telegram_chat_id,
                    f"‚ùå –ó–∞–Ω—è—Ç–∏–µ {lesson_time} –æ—Ç–º–µ–Ω–µ–Ω–æ.\n"
                    f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
                )
            
            send_notification(message.chat.id, f"‚úÖ –£—Ä–æ–∫ —Å {student.full_name} –æ—Ç–º–µ–Ω–µ–Ω.")
    
    except (IndexError, ValueError):
        send_notification(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /cancel_lesson [ID —É—Ä–æ–∫–∞]")
    except Exception as e:
        send_notification(message.chat.id, f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —É—Ä–æ–∫–∞: {e}")

@bot.message_handler(commands=['complete_homework'])
def complete_homework_command(message):
    if message.from_user.username != config.TUTOR_ID:
        send_notification(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    try:
        homework_id = int(message.text.split()[1])
        
        with session_scope() as session:
            homework = session.get(Homework, homework_id)
            if not homework:
                send_notification(message.chat.id, "–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return
            
            if not homework.submitted_date:
                send_notification(message.chat.id, "–≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–º.")
                return
            
            homework.is_confirmed_by_tutor = True
            session.commit()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
            student = homework.student
            if student.telegram_chat_id and student.receive_notifications:
                send_notification(
                    student.telegram_chat_id,
                    f"‚úÖ –í–∞—à–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –∏ –ø—Ä–∏–Ω—è—Ç–æ!\n\n"
                    f"–ó–∞–¥–∞–Ω–∏–µ: {homework.description}"
                )
            
            send_notification(message.chat.id, f"‚úÖ –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ {student.full_name} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.")
    
    except (IndexError, ValueError):
        send_notification(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /complete_homework [ID –∑–∞–¥–∞–Ω–∏—è]")
    except Exception as e:
        send_notification(message.chat.id, f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
@bot.message_handler(func=lambda message: True)
def handle_unknown_message(message):
    chat_id = str(message.chat.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç—É–¥–µ–Ω—Ç –ª–∏ —ç—Ç–æ
    with session_scope() as session:
        student = session.query(Student).filter_by(telegram_chat_id=chat_id).first()
        if student:
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—é
            send_student_menu(message.chat.id, student)
        elif message.from_user.username == config.TUTOR_ID:
            # –î–ª—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
            send_tutor_menu(message.chat.id)
        else:
            send_notification(message.chat.id, 
                "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ sqlalchemy –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏
from sqlalchemy import func

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def run_bot():
    print("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()

if __name__ == '__main__':
    run_bot()