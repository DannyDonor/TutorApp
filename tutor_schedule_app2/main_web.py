from flask import Flask, render_template, request, redirect, session as flask_session, url_for, flash
from database import (Session, Student, Lesson, Tutor, Parent, Homework, Payment, User, Invitation,
                     Course, CourseModule, CourseLesson, CourseMaterial, CourseAssignment, 
                     CourseEnrollment, CourseSubmission, LessonBlock)
import config
import os
from datetime import datetime, timedelta, time
from contextlib import contextmanager
from sqlalchemy.exc import SQLAlchemyError, AmbiguousForeignKeysError, OperationalError
from sqlalchemy import or_ # –î–ª—è –ø–æ–∏—Å–∫–∞
from sqlalchemy import func
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from functools import wraps

app = Flask(__name__)
app.secret_key = 'secret_key'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
def send_email(to_email, subject, body):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ email –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è"""
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏)
        smtp_server = "smtp.gmail.com"
        smtp_port = 587
        sender_email = "your_email@gmail.com"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à email
        sender_password = "your_password"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø–∞—Ä–æ–ª—å
        
        msg = MIMEMultipart()
        msg['From'] = sender_email
        msg['To'] = to_email
        msg['Subject'] = subject
        
        msg.attach(MIMEText(body, 'html'))
        
        server = smtplib.SMTP(smtp_server, smtp_port)
        server.starttls()
        server.login(sender_email, sender_password)
        text = msg.as_string()
        server.sendmail(sender_email, to_email, text)
        server.quit()
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")
        return False

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–µ–π
def role_required(*roles):
    def decorator(f):
        @wraps(f)
        def decorated_function(*args, **kwargs):
            if 'user_id' not in flask_session:
                return redirect(url_for('login'))
            
            user_role = flask_session.get('role')
            if user_role not in roles:
                flash('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ', 'error')
                # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ä–æ–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É
                if user_role == 'student':
                    return redirect(url_for('student_dashboard'))
                elif user_role in ['admin', 'tutor']:
                    return redirect(url_for('today_lessons'))
                else:
                    return redirect(url_for('login'))
            
            return f(*args, **kwargs)
        return decorated_function
    return decorator

def get_current_user_info():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–±–µ–∑ –æ–±—ä–µ–∫—Ç–∞ –ë–î)"""
    if not validate_session():
        return None
    
    with session_scope() as session:
        user = session.get(User, flask_session['user_id'])
        if user and user.is_active:
            return {
                'id': user.id,
                'username': user.username,
                'email': user.email,
                'role': user.role,
                'is_approved': user.is_approved
            }
    return None

def filter_students_by_tutor(query, session):
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É"""
    if not validate_session():
        return query.filter(Student.id == -1)  # –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏
    
    user_role = flask_session.get('role')
    user_id = flask_session.get('user_id')
    
    if user_role == 'tutor':
        return query.filter(Student.tutor_id == user_id)
    return query  # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤–∏–¥–∏—Ç –≤—Å–µ—Ö

@contextmanager
def session_scope():
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏–µ–π –ë–î"""
    session = Session()
    try:
        yield session
        session.commit()
    except SQLAlchemyError as e:
        session.rollback()
        raise e
    finally:
        session.close()

def check_and_migrate_if_needed():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
    try:
        # –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        with session_scope() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–∞–±–ª–∏—Ü –∏ —Å–≤—è–∑–µ–π
            session.query(Student).first()
            session.query(User).first()
        return True
    except (AmbiguousForeignKeysError, OperationalError) as e:
        print(f"\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        print("üîß –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")
        
        try:
            from migrate_db import quick_fix
            return quick_fix()
        except ImportError:
            print("‚ùå –ú–æ–¥—É–ª—å –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ migrate_db.py –≤—Ä—É—á–Ω—É—é.")
            return False
        except Exception as migration_error:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {migration_error}")
            return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ë–î: {e}")
        return False

@app.context_processor
def inject_pending_homeworks_count():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤"""
    context = {'pending_homeworks_count': 0}
    
    if flask_session.get('role') in ['admin', 'tutor']:
        try:
            with session_scope() as session:
                pending_count = session.query(Homework).filter(
                    Homework.submitted_date.isnot(None),
                    Homework.is_confirmed_by_tutor == False
                ).count()
                context['pending_homeworks_count'] = pending_count
        except:
            pass
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è—Ö
    context['can_create_courses'] = can_create_courses()
    
    return context

def validate_session():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏"""
    if 'user_id' not in flask_session:
        return False
    
    try:
        with session_scope() as session:
            user = session.get(User, flask_session['user_id'])
            if not user:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î - –æ—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
                flask_session.clear()
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–µ—Å—Å–∏–∏
            if (flask_session.get('username') != user.username or 
                flask_session.get('role') != user.role):
                # –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç - –æ—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
                flask_session.clear()
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if not user.is_active:
                flask_session.clear()
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            session_token = flask_session.get('session_token')
            if session_token and user.reset_token != session_token:
                # –¢–æ–∫–µ–Ω –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç - –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª —Å –¥—Ä—É–≥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                flask_session.clear()
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–µ—Å—Å–∏–∏ (–º–∞–∫—Å–∏–º—É–º 24 —á–∞—Å–∞)
            login_time_str = flask_session.get('login_time')
            if login_time_str:
                try:
                    login_time = datetime.fromisoformat(login_time_str)
                    if (datetime.now() - login_time).total_seconds() > 24 * 3600:  # 24 —á–∞—Å–∞
                        flask_session.clear()
                        return False
                except:
                    flask_session.clear()
                    return False
                
            return True
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
        flask_session.clear()
        return False

@app.before_request
def require_login():
    allowed = ['login', 'register', 'forgot_password', 'reset_password', 'static']
    
    if request.endpoint not in allowed:
        if 'user_id' not in flask_session:
            return redirect(url_for('login'))
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
        if not validate_session():
            flash('–í–∞—à–∞ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞. –í–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.', 'warning')
            return redirect(url_for('login'))

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        
        with session_scope() as session:
            user = session.query(User).filter_by(username=username).first()
            
            if user and user.check_password(password) and user.is_active:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–¥–æ–±—Ä–µ–Ω–∏–µ –¥–ª—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤
                if user.role == 'tutor' and not user.is_approved:
                    flash('–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –æ–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', 'error')
                    return render_template('login.html')
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                import uuid
                session_token = str(uuid.uuid4())
                
                flask_session['user_id'] = user.id
                flask_session['username'] = user.username
                flask_session['role'] = user.role
                flask_session['logged_in'] = True
                flask_session['session_token'] = session_token
                flask_session['login_time'] = datetime.now().isoformat()
                
                if user.role == 'student':
                    flask_session['student_id'] = user.student_id
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏ –≤ –ë–î (–¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–∑—ã–≤–∞)
                user.reset_token = session_token  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–æ –ø–æ–ª–µ –≤—Ä–µ–º–µ–Ω–Ω–æ
                session.commit()
                
                flash(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.username}!', 'success')
                return redirect(url_for('index'))
            else:
                flash('–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å', 'error')
    
    return render_template('login.html')

@app.route('/logout')
def logout():
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã—Ö–æ–¥ —Å –æ—á–∏—Å—Ç–∫–æ–π —Ç–æ–∫–µ–Ω–∞"""
    user_id = flask_session.get('user_id')
    
    # –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω –≤ –ë–î
    if user_id:
        try:
            with session_scope() as session:
                user = session.get(User, user_id)
                if user:
                    user.reset_token = None  # –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏
                    session.commit()
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ: {e}")
    
    # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    flask_session.clear()
    flash('–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', 'info')
    return redirect(url_for('login'))

@app.route('/register', methods=['GET', 'POST'])
@app.route('/register/<token>', methods=['GET', 'POST'])
def register(token=None):
    invitation = None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω
    if token:
        with session_scope() as session:
            invitation = session.query(Invitation).filter_by(token=token, is_used=False).first()
            if not invitation or invitation.is_expired():
                flash('–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∞—è —Å—Å—ã–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è', 'error')
                return redirect(url_for('login'))
    
    if request.method == 'POST':
        username = request.form['username']
        email = request.form['email']
        password = request.form['password']
        confirm_password = request.form['confirm_password']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å
        if invitation:
            role = invitation.role
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ email —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º
            if email != invitation.email:
                flash('Email –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –≤ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏', 'error')
                return render_template('register.html', invitation=invitation)
        else:
            # –ë–µ–∑ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
            role = 'tutor'
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if password != confirm_password:
            flash('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç', 'error')
            return render_template('register.html', invitation=invitation)
        
        if len(password) < 6:
            flash('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤', 'error')
            return render_template('register.html', invitation=invitation)
        
        with session_scope() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
            if session.query(User).filter_by(username=username).first():
                flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'error')
                return render_template('register.html', invitation=invitation)
            
            if session.query(User).filter_by(email=email).first():
                flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'error')
                return render_template('register.html', invitation=invitation)
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User(username=username, email=email, role=role)
            user.set_password(password)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
            if role == 'tutor':
                user.is_approved = False  # –†–µ–ø–µ—Ç–∏—Ç–æ—Ä—ã —Ç—Ä–µ–±—É—é—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è
                flash('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.', 'info')
            elif role == 'student' and invitation:
                user.is_approved = True
                user.student_id = invitation.student_id
                # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–µ
                invitation.is_used = True
                flash('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.', 'success')
            
            session.add(user)
            session.commit()
            
            return redirect(url_for('login'))
    
    return render_template('register.html', invitation=invitation)

@app.route('/forgot_password', methods=['GET', 'POST'])
def forgot_password():
    if request.method == 'POST':
        email = request.form['email']
        
        with session_scope() as session:
            user = session.query(User).filter_by(email=email).first()
            
            if user:
                token = user.generate_reset_token()
                session.commit()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å —Ç–æ–∫–µ–Ω–æ–º
                reset_url = url_for('reset_password', token=token, _external=True)
                subject = "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è - TutorApp"
                body = f"""
                <h2>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è</h2>
                <p>–î–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:</p>
                <a href="{reset_url}">–°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å</a>
                <p>–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞.</p>
                """
                
                if send_email(email, subject, body):
                    flash('–°—Å—ã–ª–∫–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –≤–∞—à email', 'success')
                else:
                    flash('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', 'error')
            else:
                flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
    
    return render_template('forgot_password.html')

@app.route('/reset_password/<token>', methods=['GET', 'POST'])
def reset_password(token):
    with session_scope() as session:
        user = session.query(User).filter_by(reset_token=token).first()
        
        if not user or not user.reset_token_expires or user.reset_token_expires < datetime.now():
            flash('–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è', 'error')
            return redirect(url_for('forgot_password'))
        
        if request.method == 'POST':
            password = request.form['password']
            confirm_password = request.form['confirm_password']
            
            if password != confirm_password:
                flash('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç', 'error')
                return render_template('reset_password.html')
            
            if len(password) < 6:
                flash('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤', 'error')
                return render_template('reset_password.html')
            
            user.set_password(password)
            user.reset_token = None
            user.reset_token_expires = None
            session.commit()
            
            flash('–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.', 'success')
            return redirect(url_for('login'))
    
    return render_template('reset_password.html')

@app.route('/settings', methods=['GET', 'POST'])
def user_settings():
    with session_scope() as session:
        current_user = session.get(User, flask_session['user_id'])
        
        if request.method == 'POST':
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
            if current_user.role in ['admin', 'tutor']:
                bot_token = request.form.get('bot_token', '').strip()
                if bot_token:
                    current_user.bot_token = bot_token
                elif 'bot_token' in request.form:  # –ï—Å–ª–∏ –ø–æ–ª–µ –µ—Å—Ç—å, –Ω–æ –ø—É—Å—Ç–æ–µ
                    current_user.bot_token = None
            
            # –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
            current_password = request.form.get('current_password', '').strip()
            new_password = request.form.get('new_password', '').strip()
            confirm_password = request.form.get('confirm_password', '').strip()
            
            if current_password and new_password and confirm_password:
                if not current_user.check_password(current_password):
                    flash('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å', 'error')
                    return render_template('user_settings.html', current_user=current_user)
                
                if new_password != confirm_password:
                    flash('–ù–æ–≤—ã–µ –ø–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç', 'error')
                    return render_template('user_settings.html', current_user=current_user)
                
                if len(new_password) < 6:
                    flash('–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤', 'error')
                    return render_template('user_settings.html', current_user=current_user)
                
                current_user.set_password(new_password)
                flash('–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω', 'success')
            
            session.commit()
            flash('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success')
            return redirect(url_for('user_settings'))
        
        return render_template('user_settings.html', current_user=current_user)

@app.route('/student_settings', methods=['GET', 'POST'])
@role_required('student')
def student_settings():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"""
    with session_scope() as session:
        current_user = session.get(User, flask_session['user_id'])
        
        if request.method == 'POST':
            # –û–±–Ω–æ–≤–ª—è–µ–º email
            new_email = request.form.get('email', '').strip()
            if new_email and new_email != current_user.email:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –Ω–æ–≤—ã–π email
                existing_user = session.query(User).filter(
                    User.email == new_email,
                    User.id != current_user.id
                ).first()
                
                if existing_user:
                    flash('Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º', 'error')
                    return render_template('student_settings.html', current_user=current_user)
                
                current_user.email = new_email
                current_user.username = new_email  # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥–∏–Ω —Ç–æ–∂–µ
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å—Ç—É–¥–µ–Ω—Ç–∞ (–Ω–æ –ù–ï Chat ID)
            if current_user.student:
                current_user.student.receive_notifications = 'receive_notifications' in request.form
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è
            current_password = request.form.get('current_password', '').strip()
            new_password = request.form.get('new_password', '').strip()
            confirm_password = request.form.get('confirm_password', '').strip()
            
            if current_password or new_password or confirm_password:
                if not current_password:
                    flash('–î–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å', 'error')
                    return render_template('student_settings.html', current_user=current_user)
                
                if not current_user.check_password(current_password):
                    flash('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å', 'error')
                    return render_template('student_settings.html', current_user=current_user)
                
                if new_password != confirm_password:
                    flash('–ù–æ–≤—ã–µ –ø–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç', 'error')
                    return render_template('student_settings.html', current_user=current_user)
                
                if len(new_password) < 6:
                    flash('–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤', 'error')
                    return render_template('student_settings.html', current_user=current_user)
                
                current_user.set_password(new_password)
                flash('–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω', 'success')
            
            session.commit()
            flash('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success')
            return redirect(url_for('student_settings'))
        
        return render_template('student_settings.html', current_user=current_user)

@app.route('/admin/security')
@role_required('admin')
def admin_security():
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    with session_scope() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–æ–∫–µ–Ω–∞–º–∏)
        active_sessions = session.query(User).filter(
            User.reset_token.isnot(None),
            User.is_active == True
        ).all()
        
        return render_template('admin_security.html', active_sessions=active_sessions)

@app.route('/admin/revoke_session/<int:user_id>', methods=['POST'])
@role_required('admin')
def revoke_user_session(user_id):
    """–û—Ç–∑—ã–≤ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with session_scope() as session:
        user = session.get(User, user_id)
        if user:
            user.reset_token = None  # –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏
            session.commit()
            flash(f'–°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} –æ—Ç–æ–∑–≤–∞–Ω–∞', 'success')
        else:
            flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
    
    return redirect(url_for('admin_security'))

@app.route('/admin/system_settings', methods=['GET', 'POST'])
@role_required('admin')
def system_settings():
    """–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
    with session_scope() as session:
        if request.method == 'POST':
            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ config.py
            bot_token = request.form.get('bot_token', '').strip()
            
            if bot_token:
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω –≤ —Ñ–∞–π–ª config.py
                try:
                    config_path = os.path.join(os.path.dirname(__file__), 'config.py')
                    with open(config_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    # –ó–∞–º–µ–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ —Ñ–∞–π–ª–µ
                    import re
                    content = re.sub(
                        r'BOT_TOKEN\s*=\s*["\'][^"\']*["\']',
                        f'BOT_TOKEN = "{bot_token}"',
                        content
                    )
                    
                    with open(config_path, 'w', encoding='utf-8') as f:
                        f.write(content)
                    
                    flash('–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö', 'success')
                    
                except Exception as e:
                    flash(f'–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}', 'error')
            
            return redirect(url_for('system_settings'))
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω –∏–∑ config
        import config
        current_token = getattr(config, 'BOT_TOKEN', '')
        
        return render_template('system_settings.html', current_token=current_token)

# ==================== –°–ò–°–¢–ï–ú–ê –ö–£–†–°–û–í ====================

@app.route('/courses')
@role_required('admin', 'tutor')
def courses_list():
    """–°–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤"""
    current_user_info = get_current_user_info()
    
    with session_scope() as session:
        if current_user_info['role'] == 'admin':
            # –ê–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ –∫—É—Ä—Å—ã
            courses = session.query(Course).order_by(Course.created_at.desc()).all()
        else:
            # –†–µ–ø–µ—Ç–∏—Ç–æ—Ä –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∫—É—Ä—Å—ã
            courses = session.query(Course).filter_by(tutor_id=current_user_info['id']).order_by(Course.created_at.desc()).all()
        
        return render_template('courses_list.html', courses=courses)

def can_create_courses():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫—É—Ä—Å—ã"""
    if not validate_session():
        return False
    
    user_role = flask_session.get('role')
    user_id = flask_session.get('user_id')
    
    # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≤—Å–µ–≥–¥–∞ –º–æ–≥—É—Ç
    if user_role == 'admin':
        return True
    
    # –î–ª—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    if user_role == 'tutor':
        with session_scope() as session:
            user = session.get(User, user_id)
            return user and user.can_create_courses
    
    return False

@app.route('/courses/create', methods=['GET', 'POST'])
@role_required('tutor')
def create_course():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–æ–≤
    if not can_create_courses():
        flash('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.', 'error')
        return redirect(url_for('courses_list'))
    
    current_user_info = get_current_user_info()
    
    if request.method == 'POST':
        title = request.form.get('title', '').strip()
        description = request.form.get('description', '').strip()
        
        if not title:
            flash('–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ', 'error')
            return render_template('create_course.html')
        
        with session_scope() as session:
            course = Course(
                title=title,
                description=description,
                tutor_id=current_user_info['id']
            )
            session.add(course)
            session.commit()
            
            flash(f'–ö—É—Ä—Å "{title}" —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!', 'success')
            return redirect(url_for('course_detail', course_id=course.id))
    
    return render_template('create_course.html')

@app.route('/courses/<int:course_id>')
@role_required('admin', 'tutor')
def course_detail(course_id):
    """–î–µ—Ç–∞–ª–∏ –∫—É—Ä—Å–∞ —Å –º–æ–¥—É–ª—è–º–∏ –∏ —É—Ä–æ–∫–∞–º–∏"""
    current_user_info = get_current_user_info()
    
    with session_scope() as session:
        course = session.get(Course, course_id)
        
        if not course:
            flash('–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
            return redirect(url_for('courses_list'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if current_user_info['role'] != 'admin' and course.tutor_id != current_user_info['id']:
            flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫—É—Ä—Å—É', 'error')
            return redirect(url_for('courses_list'))
        
        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥—É–ª–∏ —Å —É—Ä–æ–∫–∞–º–∏
        modules = session.query(CourseModule).filter_by(
            course_id=course_id, is_active=True
        ).order_by(CourseModule.order_index).all()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        enrollments_count = session.query(CourseEnrollment).filter_by(
            course_id=course_id, is_active=True
        ).count()
        
        return render_template('course_detail.html', 
                             course=course, 
                             modules=modules, 
                             enrollments_count=enrollments_count)

@app.route('/courses/<int:course_id>/modules/create', methods=['GET', 'POST'])
@role_required('tutor')
def create_module(course_id):
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥—É–ª—è –∫—É—Ä—Å–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–æ–≤
    if not can_create_courses():
        flash('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–æ–≤', 'error')
        return redirect(url_for('courses_list'))
    
    current_user_info = get_current_user_info()
    
    with session_scope() as session:
        course = session.get(Course, course_id)
        
        if not course or course.tutor_id != current_user_info['id']:
            flash('–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞', 'error')
            return redirect(url_for('courses_list'))
        
        if request.method == 'POST':
            title = request.form.get('title', '').strip()
            description = request.form.get('description', '').strip()
            
            if not title:
                flash('–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ', 'error')
                return render_template('create_module.html', course=course)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä
            max_order = session.query(CourseModule).filter_by(course_id=course_id).count()
            
            module = CourseModule(
                course_id=course_id,
                title=title,
                description=description,
                order_index=max_order + 1
            )
            session.add(module)
            session.commit()
            
            flash(f'–ú–æ–¥—É–ª—å "{title}" —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!', 'success')
            return redirect(url_for('course_detail', course_id=course_id))
        
        return render_template('create_module.html', course=course)

@app.route('/modules/<int:module_id>/lessons/create', methods=['GET', 'POST'])
@role_required('tutor')
def create_lesson(module_id):
    """–°–æ–∑–¥–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –º–æ–¥—É–ª—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–æ–≤
    if not can_create_courses():
        flash('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–æ–≤', 'error')
        return redirect(url_for('courses_list'))
    
    current_user_info = get_current_user_info()
    
    with session_scope() as session:
        module = session.get(CourseModule, module_id)
        
        if not module:
            flash('–ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
            return redirect(url_for('courses_list'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ –∫—É—Ä—Å
        course = session.get(Course, module.course_id)
        if not course or course.tutor_id != current_user_info['id']:
            flash('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –º–æ–¥—É–ª—é', 'error')
            return redirect(url_for('courses_list'))
        
        if request.method == 'POST':
            title = request.form.get('title', '').strip()
            content = request.form.get('content', '').strip()
            
            if not title:
                flash('–ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ', 'error')
                return render_template('create_lesson.html', module=module, course=course)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä
            max_order = session.query(CourseLesson).filter_by(module_id=module_id).count()
            
            lesson = CourseLesson(
                module_id=module_id,
                title=title,
                content=content,
                order_index=max_order + 1
            )
            session.add(lesson)
            session.commit()
            
            flash(f'–£—Ä–æ–∫ "{title}" —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!', 'success')
            return redirect(url_for('course_detail', course_id=course.id))
        
        return render_template('create_lesson.html', module=module, course=course)

@app.route('/lessons/<int:lesson_id>')
@role_required('admin', 'tutor')
def lesson_detail(lesson_id):
    """–î–µ—Ç–∞–ª–∏ —É—Ä–æ–∫–∞"""
    current_user_info = get_current_user_info()
    
    with session_scope() as session:
        lesson = session.get(CourseLesson, lesson_id)
        
        if not lesson:
            flash('–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
            return redirect(url_for('courses_list'))
        
        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥—É–ª—å –∏ –∫—É—Ä—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
        module = session.get(CourseModule, lesson.module_id)
        course = session.get(Course, module.course_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if current_user_info['role'] != 'admin' and course.tutor_id != current_user_info['id']:
            flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —É—Ä–æ–∫—É', 'error')
            return redirect(url_for('courses_list'))
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã —É—Ä–æ–∫–∞
        materials = session.query(CourseMaterial).filter_by(lesson_id=lesson_id).all()
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è —É—Ä–æ–∫–∞
        assignments = session.query(CourseAssignment).filter_by(lesson_id=lesson_id).all()
        
        # –ü–æ–ª—É—á–∞–µ–º –±–ª–æ–∫–∏ —É—Ä–æ–∫–∞
        blocks = session.query(LessonBlock).filter_by(lesson_id=lesson_id).order_by(LessonBlock.order_index).all()
        
        return render_template('lesson_detail.html', 
                             lesson=lesson, 
                             module=module,
                             course=course,
                             materials=materials,
                             assignments=assignments,
                             blocks=blocks)

@app.route('/lessons/<int:lesson_id>/materials/add', methods=['GET', 'POST'])
@role_required('tutor')
def add_material(lesson_id):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∫ —É—Ä–æ–∫—É"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–æ–≤
    if not can_create_courses():
        flash('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–æ–≤', 'error')
        return redirect(url_for('courses_list'))
    
    current_user_info = get_current_user_info()
    
    with session_scope() as session:
        lesson = session.get(CourseLesson, lesson_id)
        
        if not lesson:
            flash('–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
            return redirect(url_for('courses_list'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ –∫—É—Ä—Å
        module = session.get(CourseModule, lesson.module_id)
        course = session.get(Course, module.course_id)
        
        if not course or course.tutor_id != current_user_info['id']:
            flash('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —É—Ä–æ–∫—É', 'error')
            return redirect(url_for('courses_list'))
        
        if request.method == 'POST':
            title = request.form.get('title', '').strip()
            url = request.form.get('url', '').strip()
            description = request.form.get('description', '').strip()
            
            if not title or not url:
                flash('–ù–∞–∑–≤–∞–Ω–∏–µ –∏ —Å—Å—ã–ª–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã', 'error')
                return render_template('add_material.html', lesson=lesson, module=module, course=course)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–æ URL
            material_type = determine_material_type(url)
            
            material = CourseMaterial(
                lesson_id=lesson_id,
                title=title,
                material_type=material_type,
                file_path=url,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º file_path –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è URL
                original_filename=description if description else title
            )
            session.add(material)
            session.commit()
            
            flash(f'–ú–∞—Ç–µ—Ä–∏–∞–ª "{title}" –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 'success')
            return redirect(url_for('lesson_detail', lesson_id=lesson_id))
        
        return render_template('add_material.html', lesson=lesson, module=module, course=course)

def determine_material_type(url):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–æ URL"""
    url_lower = url.lower()
    
    if 'docs.google.com/presentation' in url_lower:
        return 'presentation'
    elif 'docs.google.com/document' in url_lower:
        return 'document'
    elif 'docs.google.com/spreadsheets' in url_lower:
        return 'spreadsheet'
    elif 'drive.google.com' in url_lower:
        return 'drive_file'
    elif 'youtube.com' in url_lower or 'youtu.be' in url_lower:
        return 'video'
    elif 'vimeo.com' in url_lower:
        return 'video'
    elif any(ext in url_lower for ext in ['.pdf', '.doc', '.docx']):
        return 'document'
    elif any(ext in url_lower for ext in ['.jpg', '.jpeg', '.png', '.gif']):
        return 'image'
    elif any(ext in url_lower for ext in ['.mp4', '.avi', '.mov']):
        return 'video'
    else:
        return 'link'

# ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–õ–û–ö–ê–ú–ò –£–†–û–ö–ê ====================

@app.route('/lessons/<int:lesson_id>/blocks/add', methods=['GET', 'POST'])
@role_required('tutor')
def add_text_block(lesson_id):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ –∫ —É—Ä–æ–∫—É"""
    current_user_info = get_current_user_info()
    
    with session_scope() as session:
        lesson = session.get(CourseLesson, lesson_id)
        
        if not lesson:
            flash('–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
            return redirect(url_for('courses_list'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ –∫—É—Ä—Å
        module = session.get(CourseModule, lesson.module_id)
        course = session.get(Course, module.course_id)
        
        if not course or course.tutor_id != current_user_info['id']:
            flash('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —É—Ä–æ–∫—É', 'error')
            return redirect(url_for('courses_list'))
        
        if request.method == 'POST':
            title = request.form.get('title', '').strip()
            content = request.form.get('content', '').strip()
            
            if not content:
                flash('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–ª–æ–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ', 'error')
                return render_template('add_text_block.html', lesson=lesson, module=module, course=course)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä
            max_order = session.query(LessonBlock).filter_by(lesson_id=lesson_id).count()
            
            block = LessonBlock(
                lesson_id=lesson_id,
                block_type='text',
                title=title if title else None,
                content=content,
                order_index=max_order + 1
            )
            session.add(block)
            session.commit()
            
            flash('–¢–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 'success')
            return redirect(url_for('lesson_detail', lesson_id=lesson_id))
        
        return render_template('add_text_block.html', lesson=lesson, module=module, course=course)

@app.route('/lessons/<int:lesson_id>/blocks/<int:block_id>/edit', methods=['GET', 'POST'])
@role_required('tutor')
def edit_text_block(lesson_id, block_id):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞"""
    current_user_info = get_current_user_info()
    
    with session_scope() as session:
        block = session.get(LessonBlock, block_id)
        
        if not block or block.lesson_id != lesson_id:
            flash('–ë–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
            return redirect(url_for('courses_list'))
        
        lesson = session.get(CourseLesson, lesson_id)
        module = session.get(CourseModule, lesson.module_id)
        course = session.get(Course, module.course_id)
        
        if not course or course.tutor_id != current_user_info['id']:
            flash('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–ª–æ–∫—É', 'error')
            return redirect(url_for('courses_list'))
        
        if request.method == 'POST':
            title = request.form.get('title', '').strip()
            content = request.form.get('content', '').strip()
            
            if not content:
                flash('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–ª–æ–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ', 'error')
                return render_template('edit_text_block.html', block=block, lesson=lesson, module=module, course=course)
            
            block.title = title if title else None
            block.content = content
            session.commit()
            
            flash('–ë–ª–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 'success')
            return redirect(url_for('lesson_detail', lesson_id=lesson_id))
        
        return render_template('edit_text_block.html', block=block, lesson=lesson, module=module, course=course)

@app.route('/lessons/<int:lesson_id>/blocks/<int:block_id>/delete', methods=['POST'])
@role_required('tutor')
def delete_text_block(lesson_id, block_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞"""
    current_user_info = get_current_user_info()
    
    with session_scope() as session:
        block = session.get(LessonBlock, block_id)
        
        if not block or block.lesson_id != lesson_id:
            flash('–ë–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
            return redirect(url_for('lesson_detail', lesson_id=lesson_id))
        
        lesson = session.get(CourseLesson, lesson_id)
        module = session.get(CourseModule, lesson.module_id)
        course = session.get(Course, module.course_id)
        
        if not course or course.tutor_id != current_user_info['id']:
            flash('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–ª–æ–∫—É', 'error')
            return redirect(url_for('lesson_detail', lesson_id=lesson_id))
        
        session.delete(block)
        session.commit()
        
        flash('–ë–ª–æ–∫ —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 'success')
        return redirect(url_for('lesson_detail', lesson_id=lesson_id))

@app.route('/lessons/<int:lesson_id>/blocks/reorder', methods=['POST'])
@role_required('tutor')
def reorder_blocks(lesson_id):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –±–ª–æ–∫–æ–≤"""
    current_user_info = get_current_user_info()
    
    with session_scope() as session:
        lesson = session.get(CourseLesson, lesson_id)
        
        if not lesson:
            return {'success': False, 'message': '–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω'}
        
        module = session.get(CourseModule, lesson.module_id)
        course = session.get(Course, module.course_id)
        
        if not course or course.tutor_id != current_user_info['id']:
            return {'success': False, 'message': '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞'}
        
        block_ids = request.json.get('block_ids', [])
        
        for index, block_id in enumerate(block_ids):
            block = session.get(LessonBlock, block_id)
            if block and block.lesson_id == lesson_id:
                block.order_index = index + 1
        
        session.commit()
        return {'success': True}

# ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–î–ê–ù–ò–Ø–ú–ò ====================

@app.route('/lessons/<int:lesson_id>/assignments/add', methods=['GET', 'POST'])
@role_required('tutor')
def add_assignment(lesson_id):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∫ —É—Ä–æ–∫—É"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–æ–≤
    if not can_create_courses():
        flash('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–æ–≤', 'error')
        return redirect(url_for('courses_list'))
    
    current_user_info = get_current_user_info()
    
    with session_scope() as session:
        lesson = session.get(CourseLesson, lesson_id)
        
        if not lesson:
            flash('–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
            return redirect(url_for('courses_list'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ –∫—É—Ä—Å
        module = session.get(CourseModule, lesson.module_id)
        course = session.get(Course, module.course_id)
        
        if not course or course.tutor_id != current_user_info['id']:
            flash('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —É—Ä–æ–∫—É', 'error')
            return redirect(url_for('courses_list'))
        
        if request.method == 'POST':
            title = request.form.get('title', '').strip()
            description = request.form.get('description', '').strip()
            assignment_type = request.form.get('assignment_type', 'text')
            is_required = request.form.get('is_required') == 'on'
            max_points = request.form.get('max_points', 100)
            
            if not title or not description:
                flash('–ù–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã', 'error')
                return render_template('add_assignment.html', lesson=lesson, module=module, course=course)
            
            try:
                max_points = int(max_points)
                if max_points < 1:
                    max_points = 1
            except ValueError:
                max_points = 100
            
            assignment = CourseAssignment(
                lesson_id=lesson_id,
                title=title,
                description=description,
                assignment_type=assignment_type,
                is_required=is_required,
                max_points=max_points
            )
            session.add(assignment)
            session.commit()
            
            flash(f'–ó–∞–¥–∞–Ω–∏–µ "{title}" –¥–æ–±–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!', 'success')
            return redirect(url_for('lesson_detail', lesson_id=lesson_id))
        
        return render_template('add_assignment.html', lesson=lesson, module=module, course=course)

@app.route('/assignments/<int:assignment_id>/edit', methods=['GET', 'POST'])
@role_required('tutor')
def edit_assignment(assignment_id):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"""
    current_user_info = get_current_user_info()
    
    with session_scope() as session:
        assignment = session.get(CourseAssignment, assignment_id)
        
        if not assignment:
            flash('–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', 'error')
            return redirect(url_for('courses_list'))
        
        lesson = session.get(CourseLesson, assignment.lesson_id)
        module = session.get(CourseModule, lesson.module_id)
        course = session.get(Course, module.course_id)
        
        if not course or course.tutor_id != current_user_info['id']:
            flash('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–¥–∞–Ω–∏—é', 'error')
            return redirect(url_for('courses_list'))
        
        if request.method == 'POST':
            title = request.form.get('title', '').strip()
            description = request.form.get('description', '').strip()
            assignment_type = request.form.get('assignment_type', 'text')
            is_required = request.form.get('is_required') == 'on'
            max_points = request.form.get('max_points', 100)
            
            if not title or not description:
                flash('–ù–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã', 'error')
                return render_template('edit_assignment.html', assignment=assignment, lesson=lesson, module=module, course=course)
            
            try:
                max_points = int(max_points)
                if max_points < 1:
                    max_points = 1
            except ValueError:
                max_points = 100
            
            assignment.title = title
            assignment.description = description
            assignment.assignment_type = assignment_type
            assignment.is_required = is_required
            assignment.max_points = max_points
            session.commit()
            
            flash('–ó–∞–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!', 'success')
            return redirect(url_for('lesson_detail', lesson_id=lesson.id))
        
        return render_template('edit_assignment.html', assignment=assignment, lesson=lesson, module=module, course=course)

@app.route('/assignments/<int:assignment_id>/delete', methods=['POST'])
@role_required('tutor')
def delete_assignment(assignment_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"""
    current_user_info = get_current_user_info()
    
    with session_scope() as session:
        assignment = session.get(CourseAssignment, assignment_id)
        
        if not assignment:
            flash('–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', 'error')
            return redirect(url_for('courses_list'))
        
        lesson = session.get(CourseLesson, assignment.lesson_id)
        module = session.get(CourseModule, lesson.module_id)
        course = session.get(Course, module.course_id)
        
        if not course or course.tutor_id != current_user_info['id']:
            flash('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–¥–∞–Ω–∏—é', 'error')
            return redirect(url_for('lesson_detail', lesson_id=lesson.id))
        
        session.delete(assignment)
        session.commit()
        
        flash('–ó–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!', 'success')
        return redirect(url_for('lesson_detail', lesson_id=lesson.id))

# ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–¢–£–î–ï–ù–¢–ê–ú–ò –ö–£–†–°–ê ====================

@app.route('/courses/<int:course_id>/students')
@role_required('tutor')
def course_students(course_id):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ –∫—É—Ä—Å–∞"""
    current_user_info = get_current_user_info()
    
    with session_scope() as session:
        course = session.get(Course, course_id)
        
        if not course or course.tutor_id != current_user_info['id']:
            flash('–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞', 'error')
            return redirect(url_for('courses_list'))
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        enrollments = session.query(CourseEnrollment)\
            .filter_by(course_id=course_id)\
            .join(Student)\
            .order_by(CourseEnrollment.enrolled_at.desc())\
            .all()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫—É—Ä—Å
        enrolled_student_ids = [e.student_id for e in enrollments]
        available_students = session.query(Student)\
            .filter(Student.tutor_id == current_user_info['id'])\
            .filter(~Student.id.in_(enrolled_student_ids) if enrolled_student_ids else True)\
            .all()
        
        return render_template('course_students.html',
                             course=course,
                             enrollments=enrollments,
                             available_students=available_students)

@app.route('/courses/<int:course_id>/students/add', methods=['POST'])
@role_required('tutor')
def add_student_to_course(course_id):
    """–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–∞ –∫—É—Ä—Å"""
    current_user_info = get_current_user_info()
    
    with session_scope() as session:
        course = session.get(Course, course_id)
        
        if not course or course.tutor_id != current_user_info['id']:
            flash('–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞', 'error')
            return redirect(url_for('courses_list'))
        
        student_id = request.form.get('student_id')
        if not student_id:
            flash('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–∞', 'error')
            return redirect(url_for('course_students', course_id=course_id))
        
        try:
            student_id = int(student_id)
        except ValueError:
            flash('–ù–µ–≤–µ—Ä–Ω—ã–π ID —Å—Ç—É–¥–µ–Ω—Ç–∞', 'error')
            return redirect(url_for('course_students', course_id=course_id))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—É–¥–µ–Ω—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É
        student = session.query(Student).filter_by(
            id=student_id,
            tutor_id=current_user_info['id']
        ).first()
        
        if not student:
            flash('–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
            return redirect(url_for('course_students', course_id=course_id))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—É–¥–µ–Ω—Ç –µ—â–µ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω
        existing_enrollment = session.query(CourseEnrollment).filter_by(
            course_id=course_id,
            student_id=student_id
        ).first()
        
        if existing_enrollment:
            flash('–°—Ç—É–¥–µ–Ω—Ç —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ —ç—Ç–æ—Ç –∫—É—Ä—Å', 'warning')
            return redirect(url_for('course_students', course_id=course_id))
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
        enrollment = CourseEnrollment(
            course_id=course_id,
            student_id=student_id
        )
        session.add(enrollment)
        session.commit()
        
        flash(f'–°—Ç—É–¥–µ–Ω—Ç {student.full_name} –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ –∫—É—Ä—Å!', 'success')
        return redirect(url_for('course_students', course_id=course_id))

@app.route('/courses/<int:course_id>/students/<int:student_id>/remove', methods=['POST'])
@role_required('tutor')
def remove_student_from_course(course_id, student_id):
    """–£–±—Ä–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å –∫—É—Ä—Å–∞"""
    current_user_info = get_current_user_info()
    
    with session_scope() as session:
        course = session.get(Course, course_id)
        
        if not course or course.tutor_id != current_user_info['id']:
            flash('–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞', 'error')
            return redirect(url_for('courses_list'))
        
        enrollment = session.query(CourseEnrollment).filter_by(
            course_id=course_id,
            student_id=student_id
        ).first()
        
        if not enrollment:
            flash('–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—É—Ä—Å–µ', 'error')
            return redirect(url_for('course_students', course_id=course_id))
        
        student_name = enrollment.student.full_name
        session.delete(enrollment)
        session.commit()
        
        flash(f'–°—Ç—É–¥–µ–Ω—Ç {student_name} –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –∫—É—Ä—Å–∞', 'success')
        return redirect(url_for('course_students', course_id=course_id))

@app.route('/courses/<int:course_id>/students/<int:student_id>/toggle', methods=['POST'])
@role_required('tutor')
def toggle_student_access(course_id, student_id):
    """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –¥–æ—Å—Ç—É–ø —Å—Ç—É–¥–µ–Ω—Ç–∞ –∫ –∫—É—Ä—Å—É"""
    current_user_info = get_current_user_info()
    
    with session_scope() as session:
        course = session.get(Course, course_id)
        
        if not course or course.tutor_id != current_user_info['id']:
            flash('–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞', 'error')
            return redirect(url_for('courses_list'))
        
        enrollment = session.query(CourseEnrollment).filter_by(
            course_id=course_id,
            student_id=student_id
        ).first()
        
        if not enrollment:
            flash('–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—É—Ä—Å–µ', 'error')
            return redirect(url_for('course_students', course_id=course_id))
        
        enrollment.is_active = not enrollment.is_active
        session.commit()
        
        status = "–≤–∫–ª—é—á–µ–Ω" if enrollment.is_active else "–æ—Ç–∫–ª—é—á–µ–Ω"
        flash(f'–î–æ—Å—Ç—É–ø —Å—Ç—É–¥–µ–Ω—Ç–∞ {enrollment.student.full_name} {status}', 'success')
        return redirect(url_for('course_students', course_id=course_id))

# ==================== –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ====================

@app.route('/admin')
@role_required('admin')
def admin_panel():
    """–ì–ª–∞–≤–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    with session_scope() as session:
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        tutors_count = session.query(User).filter_by(role='tutor').count()
        students_count = session.query(Student).count()
        courses_count = session.query(Course).count()
        lessons_count = session.query(Lesson).count()
        enrollments_count = session.query(CourseEnrollment).count()
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤
        recent_tutors = session.query(User)\
            .filter_by(role='tutor')\
            .order_by(User.id.desc())\
            .limit(5)\
            .all()
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫—É—Ä—Å—ã
        recent_courses = session.query(Course)\
            .join(User, Course.tutor_id == User.id)\
            .order_by(Course.created_at.desc())\
            .limit(5)\
            .all()
        
        return render_template('admin_panel.html',
                             tutors_count=tutors_count,
                             students_count=students_count,
                             courses_count=courses_count,
                             lessons_count=lessons_count,
                             enrollments_count=enrollments_count,
                             recent_tutors=recent_tutors,
                             recent_courses=recent_courses)

@app.route('/admin/tutors')
@role_required('admin')
def admin_tutors():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞–º–∏"""
    with session_scope() as session:
        tutors = session.query(User)\
            .filter_by(role='tutor')\
            .order_by(User.id.desc())\
            .all()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
        tutors_data = []
        for tutor in tutors:
            students_count = session.query(Student)\
                .filter_by(tutor_id=tutor.id)\
                .count()
            
            courses_count = session.query(Course)\
                .filter_by(tutor_id=tutor.id)\
                .count()
            
            lessons_count = session.query(Lesson)\
                .join(Student, Lesson.student_id == Student.id)\
                .filter(Student.tutor_id == tutor.id)\
                .count()
            
            tutors_data.append({
                'tutor': tutor,
                'students_count': students_count,
                'courses_count': courses_count,
                'lessons_count': lessons_count
            })
        
        return render_template('admin_tutors.html', tutors_data=tutors_data)

@app.route('/admin/tutors/<int:tutor_id>')
@role_required('admin')
def admin_tutor_detail(tutor_id):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–µ"""
    with session_scope() as session:
        tutor = session.get(User, tutor_id)
        
        if not tutor or tutor.role != 'tutor':
            flash('–†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
            return redirect(url_for('admin_tutors'))
        
        # –°—Ç—É–¥–µ–Ω—Ç—ã —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
        students = session.query(Student)\
            .filter_by(tutor_id=tutor_id)\
            .order_by(Student.full_name)\
            .all()
        
        # –ö—É—Ä—Å—ã —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
        courses = session.query(Course)\
            .filter_by(tutor_id=tutor_id)\
            .order_by(Course.created_at.desc())\
            .all()
        
        # –ö—É—Ä—Å—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö
        courses_data = []
        for course in courses:
            enrollments = session.query(CourseEnrollment)\
                .filter_by(course_id=course.id)\
                .join(Student)\
                .all()
            
            modules_count = session.query(CourseModule)\
                .filter_by(course_id=course.id)\
                .count()
            
            lessons_count = session.query(CourseLesson)\
                .join(CourseModule, CourseLesson.module_id == CourseModule.id)\
                .filter(CourseModule.course_id == course.id)\
                .count()
            
            courses_data.append({
                'course': course,
                'enrollments': enrollments,
                'modules_count': modules_count,
                'lessons_count': lessons_count
            })
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —É—Ä–æ–∫–∏
        recent_lessons = session.query(Lesson)\
            .join(Student, Lesson.student_id == Student.id)\
            .filter(Student.tutor_id == tutor_id)\
            .order_by(Lesson.date_time.desc())\
            .limit(10)\
            .all()
        
        return render_template('admin_tutor_detail.html',
                             tutor=tutor,
                             students=students,
                             courses_data=courses_data,
                             recent_lessons=recent_lessons)

@app.route('/admin/courses')
@role_required('admin')
def admin_courses():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏"""
    with session_scope() as session:
        courses = session.query(Course)\
            .join(User, Course.tutor_id == User.id)\
            .order_by(Course.created_at.desc())\
            .all()
        
        courses_data = []
        for course in courses:
            enrollments_count = session.query(CourseEnrollment)\
                .filter_by(course_id=course.id)\
                .count()
            
            modules_count = session.query(CourseModule)\
                .filter_by(course_id=course.id)\
                .count()
            
            lessons_count = session.query(CourseLesson)\
                .join(CourseModule, CourseLesson.module_id == CourseModule.id)\
                .filter(CourseModule.course_id == course.id)\
                .count()
            
            courses_data.append({
                'course': course,
                'enrollments_count': enrollments_count,
                'modules_count': modules_count,
                'lessons_count': lessons_count
            })
        
        return render_template('admin_courses.html', courses_data=courses_data)

@app.route('/admin/tutors/<int:tutor_id>/toggle', methods=['POST'])
@role_required('admin')
def admin_toggle_tutor(tutor_id):
    """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å/–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞"""
    with session_scope() as session:
        tutor = session.get(User, tutor_id)
        
        if not tutor or tutor.role != 'tutor':
            flash('–†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
            return redirect(url_for('admin_tutors'))
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –æ–¥–æ–±—Ä–µ–Ω–∏–µ
        tutor.is_approved = not tutor.is_approved
        session.commit()
        
        status = "–æ–¥–æ–±—Ä–µ–Ω" if tutor.is_approved else "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        flash(f'–†–µ–ø–µ—Ç–∏—Ç–æ—Ä {tutor.username} {status}', 'success')
        return redirect(url_for('admin_tutor_detail', tutor_id=tutor_id))

# ==================== –°–¢–£–î–ï–ù–¢–°–ö–ò–ï –ö–£–†–°–´ ====================

@app.route('/student/courses')
@role_required('student')
def student_courses():
    """–ö—É—Ä—Å—ã —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    with session_scope() as session:
        student_id = flask_session.get('student_id')
        if not student_id:
            flash('–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
            return redirect(url_for('student_dashboard'))
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–∞ –∫—É—Ä—Å—ã
        enrollments = session.query(CourseEnrollment)\
            .filter_by(student_id=student_id, is_active=True)\
            .join(Course)\
            .order_by(Course.title)\
            .all()
        
        return render_template('student_courses.html', enrollments=enrollments)

@app.route('/student/courses/<int:course_id>')
@role_required('student')
def student_course_detail(course_id):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∫—É—Ä—Å–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    with session_scope() as session:
        student_id = flask_session.get('student_id')
        if not student_id:
            flash('–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
            return redirect(url_for('student_dashboard'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–∏—Å–∞–Ω –ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –Ω–∞ –∫—É—Ä—Å
        enrollment = session.query(CourseEnrollment)\
            .filter_by(course_id=course_id, student_id=student_id, is_active=True)\
            .first()
        
        if not enrollment:
            flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫—É—Ä—Å—É', 'error')
            return redirect(url_for('student_courses'))
        
        course = enrollment.course
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏ –∏ —É—Ä–æ–∫–∏ –∫—É—Ä—Å–∞
        modules = session.query(CourseModule)\
            .filter_by(course_id=course_id)\
            .order_by(CourseModule.order_index)\
            .all()
        
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –º–æ–¥—É–ª—è –ø–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫–∏
        modules_data = []
        for module in modules:
            lessons = session.query(CourseLesson)\
                .filter_by(module_id=module.id)\
                .order_by(CourseLesson.order_index)\
                .all()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–∂–¥–æ–º—É —É—Ä–æ–∫—É
            lessons_data = []
            for lesson in lessons:
                can_access = enrollment.can_access_lesson(lesson.id)
                is_completed = lesson.id in enrollment.get_completed_lesson_ids()
                is_current = lesson.id == enrollment.current_lesson_id
                
                lessons_data.append({
                    'lesson': lesson,
                    'can_access': can_access,
                    'is_completed': is_completed,
                    'is_current': is_current
                })
            
            modules_data.append({
                'module': module,
                'lessons': lessons_data
            })
        
        return render_template('student_course_detail.html', 
                             course=course,
                             enrollment=enrollment,
                             modules_data=modules_data)

@app.route('/student/lessons/<int:lesson_id>')
@role_required('student')
def student_lesson_view(lesson_id):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —É—Ä–æ–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–º"""
    with session_scope() as session:
        student_id = flask_session.get('student_id')
        if not student_id:
            flash('–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
            return redirect(url_for('student_dashboard'))
        
        lesson = session.get(CourseLesson, lesson_id)
        if not lesson:
            flash('–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
            return redirect(url_for('student_courses'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–∏—Å–∞–Ω –ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –Ω–∞ –∫—É—Ä—Å
        enrollment = session.query(CourseEnrollment)\
            .filter_by(course_id=lesson.module.course_id, student_id=student_id, is_active=True)\
            .first()
        
        if not enrollment:
            flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫—É—Ä—Å—É', 'error')
            return redirect(url_for('student_courses'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —É—Ä–æ–∫—É
        if not enrollment.can_access_lesson(lesson_id):
            flash('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —É—Ä–æ–∫—É', 'warning')
            return redirect(url_for('student_course_detail', course_id=lesson.module.course_id))
        
        # –ü–æ–ª—É—á–∞–µ–º –±–ª–æ–∫–∏ —É—Ä–æ–∫–∞
        blocks = session.query(LessonBlock)\
            .filter_by(lesson_id=lesson_id)\
            .order_by(LessonBlock.order_index)\
            .all()
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è —É—Ä–æ–∫–∞
        assignments = session.query(CourseAssignment)\
            .filter_by(lesson_id=lesson_id)\
            .order_by(CourseAssignment.id)\
            .all()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ—Ç–≤–µ—Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–∞
        submissions = {}
        for assignment in assignments:
            submission = session.query(CourseSubmission)\
                .filter_by(assignment_id=assignment.id, enrollment_id=enrollment.id)\
                .first()
            submissions[assignment.id] = submission
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —É—Ä–æ–∫
        can_complete = True
        if assignments:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–¥–∞–Ω–∏—è, –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            for assignment in assignments:
                submission = submissions.get(assignment.id)
                if not submission or not submission.is_approved():
                    can_complete = False
                    break
        
        is_completed = lesson_id in enrollment.get_completed_lesson_ids()
        
        return render_template('student_lesson_view.html',
                             lesson=lesson,
                             course=lesson.module.course,
                             enrollment=enrollment,
                             blocks=blocks,
                             assignments=assignments,
                             submissions=submissions,
                             can_complete=can_complete,
                             is_completed=is_completed)

@app.route('/student/lessons/<int:lesson_id>/submit', methods=['POST'])
@role_required('student')
def student_submit_assignment(lesson_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–º"""
    with session_scope() as session:
        student_id = flask_session.get('student_id')
        assignment_id = request.form.get('assignment_id')
        content = request.form.get('content', '').strip()
        
        if not assignment_id or not content:
            flash('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç', 'error')
            return redirect(url_for('student_lesson_view', lesson_id=lesson_id))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
        lesson = session.get(CourseLesson, lesson_id)
        enrollment = session.query(CourseEnrollment)\
            .filter_by(course_id=lesson.module.course_id, student_id=student_id, is_active=True)\
            .first()
        
        if not enrollment or not enrollment.can_access_lesson(lesson_id):
            flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —É—Ä–æ–∫—É', 'error')
            return redirect(url_for('student_courses'))
        
        assignment = session.get(CourseAssignment, assignment_id)
        if not assignment or assignment.lesson_id != lesson_id:
            flash('–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', 'error')
            return redirect(url_for('student_lesson_view', lesson_id=lesson_id))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ç–≤–µ—Ç
        existing_submission = session.query(CourseSubmission)\
            .filter_by(assignment_id=assignment_id, enrollment_id=enrollment.id)\
            .first()
        
        if existing_submission:
            if existing_submission.is_approved():
                flash('–≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –æ–¥–æ–±—Ä–µ–Ω–æ. –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã.', 'info')
            elif existing_submission.status == 'submitted':
                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–µpro–≤–µ—Ä–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
                existing_submission.content = content
                existing_submission.submitted_at = datetime.now()
                flash('–û—Ç–≤–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É', 'success')
            elif existing_submission.is_rejected():
                # –ü–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
                existing_submission.content = content
                existing_submission.status = 'submitted'
                existing_submission.is_checked = False
                existing_submission.submitted_at = datetime.now()
                existing_submission.checked_at = None
                flash('–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É', 'success')
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            submission = CourseSubmission(
                assignment_id=assignment_id,
                enrollment_id=enrollment.id,
                content=content,
                status='submitted'
            )
            session.add(submission)
            flash('–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É', 'success')
        
        session.commit()
        return redirect(url_for('student_lesson_view', lesson_id=lesson_id))

@app.route('/student/lessons/<int:lesson_id>/complete', methods=['POST'])
@role_required('student')
def student_complete_lesson(lesson_id):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Ä–æ–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–º (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π –∏–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã)"""
    with session_scope() as session:
        student_id = flask_session.get('student_id')
        
        lesson = session.get(CourseLesson, lesson_id)
        enrollment = session.query(CourseEnrollment)\
            .filter_by(course_id=lesson.module.course_id, student_id=student_id, is_active=True)\
            .first()
        
        if not enrollment or not enrollment.can_access_lesson(lesson_id):
            flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —É—Ä–æ–∫—É', 'error')
            return redirect(url_for('student_courses'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —É—Ä–æ–∫
        assignments = session.query(CourseAssignment)\
            .filter_by(lesson_id=lesson_id)\
            .all()
        
        if assignments:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–¥–∞–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            for assignment in assignments:
                submission = session.query(CourseSubmission)\
                    .filter_by(assignment_id=assignment.id, enrollment_id=enrollment.id)\
                    .first()
                if not submission or not submission.is_approved():
                    flash('–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∏ –ø–æ–ª—É—á–∏—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π —É—Ä–æ–∫–∞', 'warning')
                    return redirect(url_for('student_lesson_view', lesson_id=lesson_id))
        
        # –û—Ç–º–µ—á–∞–µ–º —É—Ä–æ–∫ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
        enrollment.mark_lesson_completed(lesson_id)
        session.commit()
        
        flash('–£—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω! –û—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É.', 'success')
        return redirect(url_for('student_course_detail', course_id=lesson.module.course_id))

# ==================== –ü–†–û–í–ï–†–ö–ê –ó–ê–î–ê–ù–ò–ô –†–ï–ü–ï–¢–ò–¢–û–†–û–ú ====================

@app.route('/tutor/submissions')
@role_required('tutor')
def tutor_submissions():
    """–°–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É"""
    with session_scope() as session:
        user_id = flask_session.get('user_id')
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
        submissions = session.query(CourseSubmission)\
            .join(CourseEnrollment)\
            .join(Course)\
            .join(CourseAssignment)\
            .join(CourseLesson)\
            .filter(Course.tutor_id == user_id)\
            .filter(CourseSubmission.is_checked == False)\
            .order_by(CourseSubmission.submitted_at.desc())\
            .all()
        
        return render_template('tutor_submissions.html', submissions=submissions)

@app.route('/tutor/submissions/<int:submission_id>/check', methods=['GET', 'POST'])
@role_required('tutor')
def check_submission(submission_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    with session_scope() as session:
        user_id = flask_session.get('user_id')
        
        submission = session.get(CourseSubmission, submission_id)
        if not submission:
            flash('–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
            return redirect(url_for('tutor_submissions'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –∫—É—Ä—Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É
        course = submission.assignment.lesson.module.course
        if course.tutor_id != user_id:
            flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –æ—Ç–≤–µ—Ç—É', 'error')
            return redirect(url_for('tutor_submissions'))
        
        if request.method == 'POST':
            action = request.form.get('action')  # 'approve' –∏–ª–∏ 'reject'
            points = request.form.get('points')
            feedback = request.form.get('feedback', '').strip()
            
            try:
                points = int(points) if points else None
            except ValueError:
                points = None
            
            if action == 'approve':
                # –û–¥–æ–±—Ä—è–µ–º –∑–∞–¥–∞–Ω–∏–µ
                submission.is_checked = True
                submission.status = 'approved'
                submission.points = points
                submission.tutor_feedback = feedback
                submission.checked_at = datetime.now()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–∫—Ä—ã—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫
                enrollment = submission.enrollment
                lesson = submission.assignment.lesson
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –∑–∞–¥–∞–Ω–∏—è —É—Ä–æ–∫–∞ –æ–¥–æ–±—Ä–µ–Ω—ã
                lesson_assignments = session.query(CourseAssignment)\
                    .filter_by(lesson_id=lesson.id)\
                    .all()
                
                all_approved = True
                for assignment in lesson_assignments:
                    assignment_submission = session.query(CourseSubmission)\
                        .filter_by(assignment_id=assignment.id, enrollment_id=enrollment.id)\
                        .first()
                    if not assignment_submission or not assignment_submission.is_approved():
                        all_approved = False
                        break
                
                # –ï—Å–ª–∏ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è —É—Ä–æ–∫–∞ –æ–¥–æ–±—Ä–µ–Ω—ã, —Å—Ç—É–¥–µ–Ω—Ç –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å —É—Ä–æ–∫
                if all_approved and lesson.id == enrollment.current_lesson_id:
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —É—Ä–æ–∫
                    enrollment.mark_lesson_completed(lesson.id)
                
                session.commit()
                flash('–ó–∞–¥–∞–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ!', 'success')
                
            elif action == 'reject':
                # –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏–µ
                submission.is_checked = True
                submission.status = 'rejected'
                submission.points = 0  # –ü—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –±–∞–ª–ª—ã = 0
                submission.tutor_feedback = feedback
                submission.checked_at = datetime.now()
                
                session.commit()
                flash('–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ. –°—Ç—É–¥–µ–Ω—Ç —Å–º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.', 'warning')
            
            return redirect(url_for('tutor_submissions'))
        
        return render_template('check_submission.html', submission=submission)

# ==================== –ê–ù–ê–õ–ò–¢–ò–ö–ê –ü–†–û–ì–†–ï–°–°–ê ====================

@app.route('/analytics')
@role_required('admin', 'tutor')
def analytics_dashboard():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    with session_scope() as session:
        user_role = flask_session.get('role')
        user_id = flask_session.get('user_id')
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = {}
        
        if user_role == 'admin':
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            stats['total_courses'] = session.query(Course).count()
            stats['total_students'] = session.query(Student).count()
            stats['total_tutors'] = session.query(User).filter_by(role='tutor').count()
            stats['total_enrollments'] = session.query(CourseEnrollment).filter_by(is_active=True).count()
            
            # –¢–æ–ø –∫—É—Ä—Å—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
            popular_courses = session.query(Course, func.count(CourseEnrollment.id).label('enrollment_count'))\
                .join(CourseEnrollment)\
                .filter(CourseEnrollment.is_active == True)\
                .group_by(Course.id)\
                .order_by(func.count(CourseEnrollment.id).desc())\
                .limit(10)\
                .all()
            
        else:  # tutor
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
            stats['total_courses'] = session.query(Course).filter_by(tutor_id=user_id).count()
            stats['total_students'] = session.query(Student).filter_by(tutor_id=user_id).count()
            stats['total_enrollments'] = session.query(CourseEnrollment)\
                .join(Course)\
                .filter(Course.tutor_id == user_id, CourseEnrollment.is_active == True)\
                .count()
            
            # –ö—É—Ä—Å—ã —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
            popular_courses = session.query(Course, func.count(CourseEnrollment.id).label('enrollment_count'))\
                .join(CourseEnrollment)\
                .filter(Course.tutor_id == user_id, CourseEnrollment.is_active == True)\
                .group_by(Course.id)\
                .order_by(func.count(CourseEnrollment.id).desc())\
                .all()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞–Ω–∏—è–º
        stats['pending_submissions'] = session.query(CourseSubmission)\
            .filter_by(is_checked=False)\
            .count()
        
        stats['approved_submissions'] = session.query(CourseSubmission)\
            .filter_by(status='approved')\
            .count()
        
        stats['rejected_submissions'] = session.query(CourseSubmission)\
            .filter_by(status='rejected')\
            .count()
        
        return render_template('analytics_dashboard.html', 
                             stats=stats, 
                             popular_courses=popular_courses)

@app.route('/analytics/students')
@role_required('admin', 'tutor')
def student_analytics():
    """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º"""
    with session_scope() as session:
        user_role = flask_session.get('role')
        user_id = flask_session.get('user_id')
        
        # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        if user_role == 'admin':
            students_query = session.query(Student)
        else:
            students_query = session.query(Student).filter_by(tutor_id=user_id)
        
        students = students_query.all()
        
        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
        student_analytics = []
        for student in students:
            enrollments = session.query(CourseEnrollment)\
                .filter_by(student_id=student.id, is_active=True)\
                .all()
            
            total_courses = len(enrollments)
            completed_courses = sum(1 for e in enrollments if e.progress_percentage >= 100)
            in_progress_courses = sum(1 for e in enrollments if 0 < e.progress_percentage < 100)
            avg_progress = sum(e.progress_percentage for e in enrollments) / total_courses if total_courses > 0 else 0
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞–Ω–∏—è–º
            total_submissions = session.query(CourseSubmission)\
                .join(CourseEnrollment)\
                .filter(CourseEnrollment.student_id == student.id)\
                .count()
            
            approved_submissions = session.query(CourseSubmission)\
                .join(CourseEnrollment)\
                .filter(CourseEnrollment.student_id == student.id)\
                .filter(CourseSubmission.status == 'approved')\
                .count()
            
            rejected_submissions = session.query(CourseSubmission)\
                .join(CourseEnrollment)\
                .filter(CourseEnrollment.student_id == student.id)\
                .filter(CourseSubmission.status == 'rejected')\
                .count()
            
            student_analytics.append({
                'student': student,
                'total_courses': total_courses,
                'completed_courses': completed_courses,
                'in_progress_courses': in_progress_courses,
                'avg_progress': avg_progress,
                'total_submissions': total_submissions,
                'approved_submissions': approved_submissions,
                'rejected_submissions': rejected_submissions,
                'success_rate': (approved_submissions / total_submissions * 100) if total_submissions > 0 else 0
            })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –ø—Ä–æ–≥—Ä–µ—Å—Å—É
        student_analytics.sort(key=lambda x: x['avg_progress'], reverse=True)
        
        return render_template('student_analytics.html', student_analytics=student_analytics)

@app.route('/analytics/courses')
@role_required('admin', 'tutor')
def course_analytics():
    """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∫—É—Ä—Å–∞–º"""
    with session_scope() as session:
        user_role = flask_session.get('role')
        user_id = flask_session.get('user_id')
        
        # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫—É—Ä—Å–æ–≤
        if user_role == 'admin':
            courses_query = session.query(Course)
        else:
            courses_query = session.query(Course).filter_by(tutor_id=user_id)
        
        courses = courses_query.all()
        
        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫—É—Ä—Å–∞
        course_analytics = []
        for course in courses:
            enrollments = session.query(CourseEnrollment)\
                .filter_by(course_id=course.id, is_active=True)\
                .all()
            
            total_students = len(enrollments)
            completed_students = sum(1 for e in enrollments if e.progress_percentage >= 100)
            avg_progress = sum(e.progress_percentage for e in enrollments) / total_students if total_students > 0 else 0
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤ –≤ –∫—É—Ä—Å–µ
            total_lessons = session.query(CourseLesson)\
                .join(CourseModule)\
                .filter(CourseModule.course_id == course.id)\
                .count()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞–Ω–∏—è–º
            total_assignments = session.query(CourseAssignment)\
                .join(CourseLesson)\
                .join(CourseModule)\
                .filter(CourseModule.course_id == course.id)\
                .count()
            
            total_submissions = session.query(CourseSubmission)\
                .join(CourseEnrollment)\
                .filter(CourseEnrollment.course_id == course.id)\
                .count()
            
            course_analytics.append({
                'course': course,
                'total_students': total_students,
                'completed_students': completed_students,
                'completion_rate': (completed_students / total_students * 100) if total_students > 0 else 0,
                'avg_progress': avg_progress,
                'total_lessons': total_lessons,
                'total_assignments': total_assignments,
                'total_submissions': total_submissions
            })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        course_analytics.sort(key=lambda x: x['completion_rate'], reverse=True)
        
        return render_template('course_analytics.html', course_analytics=course_analytics)

# ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–ó–†–ï–®–ï–ù–ò–Ø–ú–ò –ù–ê –ö–£–†–°–´ ====================

@app.route('/users/toggle_course_permission/<int:user_id>', methods=['POST'])
@role_required('admin')
def toggle_course_permission(user_id):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–æ–≤"""
    with session_scope() as session:
        user = session.get(User, user_id)
        if not user:
            flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
            return redirect(url_for('manage_users'))
        
        if user.role != 'tutor':
            flash('–†–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∫—É—Ä—Å—ã –º–æ–∂–Ω–æ –≤—ã–¥–∞–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞–º', 'error')
            return redirect(url_for('manage_users'))
        
        user.can_create_courses = not user.can_create_courses
        session.commit()
        
        status = "–≤—ã–¥–∞–Ω–æ" if user.can_create_courses else "–æ—Ç–æ–∑–≤–∞–Ω–æ"
        flash(f'–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–æ–≤ {status} –¥–ª—è {user.username}', 'success')
        
        return redirect(url_for('manage_users'))

@app.route('/analytics/student/<int:student_id>')
@role_required('admin', 'tutor')
def detailed_student_analytics(student_id):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Å—Ç—É–¥–µ–Ω—Ç—É"""
    with session_scope() as session:
        user_role = flask_session.get('role')
        user_id = flask_session.get('user_id')
        
        student = session.get(Student, student_id)
        if not student:
            flash('–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
            return redirect(url_for('student_analytics'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
        if user_role == 'tutor' and student.tutor_id != user_id:
            flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Å—Ç—É–¥–µ–Ω—Ç—É', 'error')
            return redirect(url_for('student_analytics'))
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫—É—Ä—Å—ã
        enrollments = session.query(CourseEnrollment)\
            .filter_by(student_id=student_id, is_active=True)\
            .join(Course)\
            .order_by(Course.title)\
            .all()
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É –∫—É—Ä—Å—É
        course_details = []
        for enrollment in enrollments:
            course = enrollment.course
            
            # –£—Ä–æ–∫–∏ –∫—É—Ä—Å–∞
            modules = session.query(CourseModule)\
                .filter_by(course_id=course.id)\
                .order_by(CourseModule.order_index)\
                .all()
            
            lessons_completed = 0
            lessons_total = 0
            lessons_details = []
            
            for module in modules:
                lessons = session.query(CourseLesson)\
                    .filter_by(module_id=module.id)\
                    .order_by(CourseLesson.order_index)\
                    .all()
                
                for lesson in lessons:
                    lessons_total += 1
                    is_completed = lesson.id in enrollment.get_completed_lesson_ids()
                    if is_completed:
                        lessons_completed += 1
                    
                    # –ó–∞–¥–∞–Ω–∏—è —É—Ä–æ–∫–∞
                    assignments = session.query(CourseAssignment)\
                        .filter_by(lesson_id=lesson.id)\
                        .all()
                    
                    assignment_stats = []
                    for assignment in assignments:
                        submission = session.query(CourseSubmission)\
                            .filter_by(assignment_id=assignment.id, enrollment_id=enrollment.id)\
                            .first()
                        
                        assignment_stats.append({
                            'assignment': assignment,
                            'submission': submission,
                            'status': submission.status if submission else 'not_submitted'
                        })
                    
                    lessons_details.append({
                        'module': module,
                        'lesson': lesson,
                        'is_completed': is_completed,
                        'is_current': lesson.id == enrollment.current_lesson_id,
                        'assignments': assignment_stats
                    })
            
            course_details.append({
                'enrollment': enrollment,
                'course': course,
                'lessons_completed': lessons_completed,
                'lessons_total': lessons_total,
                'lessons_details': lessons_details
            })
        
        return render_template('detailed_student_analytics.html', 
                             student=student, 
                             course_details=course_details)

# ==================== –†–ï–ó–ï–†–í–ù–û–ï –ö–û–ü–ò–†–û–í–ê–ù–ò–ï –ò –≠–ö–°–ü–û–†–¢ ====================

@app.route('/backup')
@role_required('admin')
def backup_dashboard():
    """–ü–∞–Ω–µ–ª—å —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
    import os
    import glob
    from datetime import datetime
    
    # –ü–∞–ø–∫–∞ –¥–ª—è –±—ç–∫–∞–ø–æ–≤
    backup_dir = 'backups'
    if not os.path.exists(backup_dir):
        os.makedirs(backup_dir)
    
    # –°–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±—ç–∫–∞–ø–æ–≤
    backup_files = []
    for filepath in glob.glob(os.path.join(backup_dir, '*.db')):
        filename = os.path.basename(filepath)
        file_size = os.path.getsize(filepath)
        file_date = datetime.fromtimestamp(os.path.getmtime(filepath))
        backup_files.append({
            'filename': filename,
            'filepath': filepath,
            'size': file_size,
            'date': file_date
        })
    
    backup_files.sort(key=lambda x: x['date'], reverse=True)
    
    return render_template('backup_dashboard.html', backup_files=backup_files)

@app.route('/backup/create', methods=['POST'])
@role_required('admin')
def create_backup():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    import shutil
    import os
    from datetime import datetime
    
    try:
        backup_dir = 'backups'
        if not os.path.exists(backup_dir):
            os.makedirs(backup_dir)
        
        # –ò–º—è —Ñ–∞–π–ª–∞ –±—ç–∫–∞–ø–∞
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        backup_filename = f'backup_{timestamp}.db'
        backup_path = os.path.join(backup_dir, backup_filename)
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        shutil.copy2(config.DB_NAME, backup_path)
        
        flash(f'–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_filename}', 'success')
    except Exception as e:
        flash(f'–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}', 'error')
    
    return redirect(url_for('backup_dashboard'))

@app.route('/backup/restore/<filename>', methods=['POST'])
@role_required('admin')
def restore_backup(filename):
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    import shutil
    import os
    
    try:
        backup_path = os.path.join('backups', filename)
        if not os.path.exists(backup_path):
            flash('–§–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
            return redirect(url_for('backup_dashboard'))
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–π –ë–î
        current_backup = f"{config.DB_NAME}.before_restore"
        shutil.copy2(config.DB_NAME, current_backup)
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –±—ç–∫–∞–ø–∞
        shutil.copy2(backup_path, config.DB_NAME)
        
        flash(f'–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ {filename}. –°–æ–∑–¥–∞–Ω–∞ –∫–æ–ø–∏—è —Ç–µ–∫—É—â–µ–π –ë–î: {current_backup}', 'success')
    except Exception as e:
        flash(f'–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}', 'error')
    
    return redirect(url_for('backup_dashboard'))

@app.route('/export/students')
@role_required('admin', 'tutor')
def export_students():
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ CSV"""
    import csv
    import io
    from flask import Response
    
    with session_scope() as session:
        user_role = flask_session.get('role')
        user_id = flask_session.get('user_id')
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        if user_role == 'admin':
            students = session.query(Student).all()
        else:
            students = session.query(Student).filter_by(tutor_id=user_id).all()
        
        # –°–æ–∑–¥–∞–µ–º CSV
        output = io.StringIO()
        writer = csv.writer(output)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        writer.writerow(['ID', '–§–ò–û', 'Email', '–¢–µ–ª–µ—Ñ–æ–Ω', '–†–µ–ø–µ—Ç–∏—Ç–æ—Ä', '–ê–∫—Ç–∏–≤–µ–Ω', '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'])
        
        # –î–∞–Ω–Ω—ã–µ
        for student in students:
            tutor_name = student.tutor.username if student.tutor else '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'
            writer.writerow([
                student.id,
                student.full_name,
                student.email,
                student.phone_number,
                tutor_name,
                '–î–∞' if student.is_active else '–ù–µ—Ç',
                student.created_at.strftime('%d.%m.%Y %H:%M') if student.created_at else ''
            ])
        
        output.seek(0)
        
        return Response(
            output.getvalue(),
            mimetype='text/csv',
            headers={'Content-Disposition': 'attachment; filename=students.csv'}
        )

@app.route('/export/courses')
@role_required('admin', 'tutor')
def export_courses():
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –≤ CSV"""
    import csv
    import io
    from flask import Response
    
    with session_scope() as session:
        user_role = flask_session.get('role')
        user_id = flask_session.get('user_id')
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∫—É—Ä—Å—ã
        if user_role == 'admin':
            courses = session.query(Course).all()
        else:
            courses = session.query(Course).filter_by(tutor_id=user_id).all()
        
        # –°–æ–∑–¥–∞–µ–º CSV
        output = io.StringIO()
        writer = csv.writer(output)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        writer.writerow(['ID', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–û–ø–∏—Å–∞–Ω–∏–µ', '–†–µ–ø–µ—Ç–∏—Ç–æ—Ä', '–°—Ç—É–¥–µ–Ω—Ç–æ–≤', '–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å', '–°–æ–∑–¥–∞–Ω'])
        
        # –î–∞–Ω–Ω—ã–µ
        for course in courses:
            enrollments = session.query(CourseEnrollment)\
                .filter_by(course_id=course.id, is_active=True)\
                .all()
            
            total_students = len(enrollments)
            avg_progress = sum(e.progress_percentage for e in enrollments) / total_students if total_students > 0 else 0
            
            writer.writerow([
                course.id,
                course.title,
                course.description,
                course.tutor.username,
                total_students,
                f"{avg_progress:.1f}%",
                course.created_at.strftime('%d.%m.%Y') if course.created_at else ''
            ])
        
        output.seek(0)
        
        return Response(
            output.getvalue(),
            mimetype='text/csv',
            headers={'Content-Disposition': 'attachment; filename=courses.csv'}
        )

@app.route('/')
def index():
    if flask_session.get('role') == 'student':
        return redirect(url_for('student_dashboard'))
    else:
        return redirect(url_for('today_lessons'))

@app.route('/add_student', methods=['GET', 'POST'])
@role_required('admin', 'tutor')
def add_student():
    current_user_info = get_current_user_info()
    
    if request.method == 'POST':
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        email = request.form.get('email', '').strip()
        password = request.form.get('password', '').strip()
        
        if not email:
            flash('Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞', 'error')
            return redirect(url_for('add_student'))
        
        if len(password) < 6:
            flash('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤', 'error')
            return redirect(url_for('add_student'))
        
        with session_scope() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
            existing_user = session.query(User).filter_by(email=email).first()
            if existing_user:
                flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'error')
                return redirect(url_for('add_student'))
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
            if current_user_info and current_user_info['role'] == 'tutor':
                tutor_id = current_user_info['id']
            else:  # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
                tutor_id = request.form.get('tutor_id')
                if tutor_id:
                    tutor_id = int(tutor_id)
                else:
                    tutor_id = None
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
            student = Student(
                full_name=request.form['full_name'],
                lessons_count=int(request.form['lessons_count']),
                telegram_chat_id=request.form['telegram_chat_id'] or None,
                receive_notifications=True,
                tutor_id=tutor_id
            )
            session.add(student)
            session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID —Å—Ç—É–¥–µ–Ω—Ç–∞
            
            # –°–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
            user_account = User(
                username=email,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º email –∫–∞–∫ –ª–æ–≥–∏–Ω
                email=email,
                role='student',
                is_approved=True,
                student_id=student.id
            )
            user_account.set_password(password)
            session.add(user_account)
            session.commit()
            
            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            if tutor_id:
                tutor = session.get(User, tutor_id)
                flash(f'–°—Ç—É–¥–µ–Ω—Ç {student.full_name} –¥–æ–±–∞–≤–ª–µ–Ω —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º {email}! –ü—Ä–∏–≤—è–∑–∞–Ω –∫ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É {tutor.username}.', 'success')
            else:
                flash(f'–°—Ç—É–¥–µ–Ω—Ç {student.full_name} –¥–æ–±–∞–≤–ª–µ–Ω —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º {email}!', 'success')
            
            return redirect(url_for('all_students'))
    
    # –î–ª—è —Ñ–æ—Ä–º—ã –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤ (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)
    tutors = []
    if current_user_info and current_user_info['role'] == 'admin':
        with session_scope() as session:
            tutors = session.query(User).filter_by(role='tutor', is_approved=True).all()
    
    return render_template('add_student.html', tutors=tutors, current_user=current_user_info)

@app.route('/all_students')
@role_required('admin', 'tutor')
def all_students():
    search_query = request.args.get('search', '').strip()
    show_archived = request.args.get('archived') == 'true'
    current_user_info = get_current_user_info()
    
    with session_scope() as session:
        query = session.query(Student)
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É
        query = filter_students_by_tutor(query, session)
        
        if show_archived:
            query = query.filter_by(is_archived=True)
        else:
            query = query.filter_by(is_archived=False)
        
        if search_query:
            query = query.filter(
                or_(
                    Student.full_name.ilike(f'%{search_query}%'),
                    Student.telegram_chat_id.ilike(f'%{search_query}%')
                )
            )
        
        students = query.order_by(Student.full_name).all()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —É—Ä–æ–∫–∞–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
        for student in students:
            # –í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤
            total_lessons = session.query(Lesson).filter_by(student_id=student.id).count()
            # –ü—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏
            completed_lessons = session.query(Lesson).filter_by(
                student_id=student.id, 
                status='–ø—Ä–æ–≤–µ–¥–µ–Ω'
            ).count()
            # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∏ (–≤ –±—É–¥—É—â–µ–º)
            scheduled_lessons = session.query(Lesson).filter(
                Lesson.student_id == student.id,
                Lesson.date_time > datetime.now(),
                Lesson.status == '–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω'
            ).count()
            
            student.total_lessons_count = total_lessons
            student.completed_lessons_count = completed_lessons
            student.scheduled_lessons_count = scheduled_lessons
        
        return render_template('all_students.html', 
                               students=students, 
                               search_query=search_query,
                               show_archived=show_archived,
                               current_user=current_user_info)

@app.route('/today_lessons')
@role_required('admin', 'tutor')
def today_lessons():
    with session_scope() as session:
        # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        today = datetime.now().date()
        lessons = session.query(Lesson).filter(
            func.date(Lesson.date_time) == today
        ).order_by(Lesson.date_time).all()
        
        return render_template('today_lessons.html', lessons=lessons)

@app.route('/all_lessons')
@role_required('admin', 'tutor')  
def all_lessons():
    page = request.args.get('page', 1, type=int)
    per_page = 20  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    
    search_query = request.args.get('search', '').strip()
    status_filter = request.args.get('status', '').strip()
    date_from = request.args.get('date_from', '').strip()
    date_to = request.args.get('date_to', '').strip()
    
    with session_scope() as session:
        query = session.query(Lesson).join(Student)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        if search_query:
            query = query.filter(Student.full_name.ilike(f'%{search_query}%'))
        
        if status_filter:
            query = query.filter(Lesson.status == status_filter)
        
        if date_from:
            try:
                date_from_obj = datetime.strptime(date_from, '%Y-%m-%d')
                query = query.filter(Lesson.date_time >= date_from_obj)
            except ValueError:
                pass
        
        if date_to:
            try:
                date_to_obj = datetime.strptime(date_to, '%Y-%m-%d') + timedelta(days=1)
                query = query.filter(Lesson.date_time < date_to_obj)
            except ValueError:
                pass
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        query = query.order_by(Lesson.date_time.desc())
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        total = query.count()
        lessons = query.offset((page - 1) * per_page).limit(per_page).all()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        pagination = {
            'page': page,
            'per_page': per_page,
            'total': total,
            'pages': (total + per_page - 1) // per_page,
            'has_prev': page > 1,
            'has_next': page * per_page < total,
            'prev_num': page - 1 if page > 1 else None,
            'next_num': page + 1 if page * per_page < total else None
        }
        
        return render_template('all_lessons.html', 
                               lessons=lessons, 
                               pagination=pagination,
                               search_query=search_query,
                               status_filter=status_filter,
                               date_from=date_from,
                               date_to=date_to)

@app.route('/add_lesson', methods=['GET', 'POST'])
@role_required('admin', 'tutor')
def add_lesson():
    if request.method == 'POST':
        with session_scope() as session:
            lesson = Lesson(
                student_id=int(request.form['student_id']),
                date_time=datetime.strptime(request.form['date_time'], '%Y-%m-%dT%H:%M'),
                status='–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω'
            )
            session.add(lesson)
            session.flush()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—É
            student = session.query(Student).get(lesson.student_id)
            if student and student.telegram_chat_id and student.receive_notifications:
                from main_tg import send_notification
                lesson_time = lesson.date_time.strftime('%d.%m.%Y –≤ %H:%M')
                send_notification(
                    student.telegram_chat_id,
                    f"üìö –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ!\n\n"
                    f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {lesson_time}\n"
                    f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è!"
                )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª–µ–π
            parents = session.query(Parent).filter_by(student_id=student.id).all()
            for parent in parents:
                from main_tg import send_notification
                lesson_time = lesson.date_time.strftime('%d.%m.%Y –≤ %H:%M')
                send_notification(
                    parent.telegram_chat_id,
                    f"üìö –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–Ω—è—Ç–∏–µ –¥–ª—è {student.full_name}\n\n"
                    f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {lesson_time}"
                )
            
            flash('–£—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!', 'success')
            return redirect(url_for('all_lessons'))
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è —Ñ–æ—Ä–º—ã
    with session_scope() as session:
        students = session.query(Student).filter_by(is_archived=False).order_by(Student.full_name).all()
        return render_template('add_lesson.html', students=students)

@app.route('/student_dashboard')
@role_required('student')
def student_dashboard():
    student_id = flask_session.get('student_id')
    with session_scope() as session:
        lessons = session.query(Lesson).filter_by(student_id=student_id).order_by(Lesson.date_time.desc()).all()
        return render_template('student_dashboard.html', lessons=lessons)

@app.route('/student_homework')
@role_required('student')
def student_homework():
    student_id = flask_session.get('student_id')
    with session_scope() as session:
        homeworks = session.query(Homework).filter_by(student_id=student_id).order_by(Homework.due_date.asc()).all()
        return render_template('student_homework.html', homeworks=homeworks)

@app.route('/submit_homework_student/<int:homework_id>', methods=['POST'])
@role_required('student')
def submit_homework_student(homework_id):
    student_id = flask_session.get('student_id')
    with session_scope() as session:
        homework = session.query(Homework).filter_by(id=homework_id, student_id=student_id).first()
        if homework and not homework.submitted_date:
            homework.student_comment = request.form.get('student_comment', '').strip()
            homework.submitted_date = datetime.now()
            homework.is_completed = True  # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–º
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
            comment_text = f"\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {homework.student_comment}" if homework.student_comment else ""
            from main_tg import send_notification
            send_notification(config.TUTOR_ID, 
                f"üì§ –°—Ç—É–¥–µ–Ω—Ç {homework.student.full_name} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:\n"
                f"'{homework.description}'{comment_text}\n\n"
                f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º–µ.")
            
            flash('–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!', 'success')
        else:
            flash('–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', 'error')
    
    return redirect(url_for('student_homework'))

# =============== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ê–†–®–†–£–¢–´ ===============

@app.route('/view_student_card/<int:student_id>')
@role_required('admin', 'tutor')
def view_student_card(student_id):
    with session_scope() as session:
        student = session.get(Student, student_id)
        if not student:
            flash('–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
            return redirect(url_for('all_students'))
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —É—Ä–æ–∫–∏
        recent_lessons = session.query(Lesson).filter_by(student_id=student_id).order_by(Lesson.date_time.desc()).limit(10).all()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
        homeworks = session.query(Homework).filter_by(student_id=student_id).order_by(Homework.due_date.desc()).all()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏
        payments = session.query(Payment).filter_by(student_id=student_id).order_by(Payment.payment_date.desc()).limit(5).all()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª–µ–π
        parents = session.query(Parent).filter_by(student_id=student_id).all()
        
        return render_template('student_card.html', 
                               student=student, 
                               recent_lessons=recent_lessons,
                               homeworks=homeworks,
                               payments=payments,
                               parents=parents)

@app.route('/edit_student/<int:student_id>', methods=['GET', 'POST'])
@role_required('admin', 'tutor')
def edit_student(student_id):
    with session_scope() as session:
        student = session.get(Student, student_id)
        if not student:
            flash('–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
            return redirect(url_for('all_students'))
        
        if request.method == 'POST':
            student.full_name = request.form['full_name']
            student.lessons_count = int(request.form['lessons_count'])
            student.telegram_chat_id = request.form['telegram_chat_id']
            student.receive_notifications = 'receive_notifications' in request.form
            
            session.commit()
            flash('–î–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!', 'success')
            return redirect(url_for('view_student_card', student_id=student_id))
        
        return render_template('edit_student.html', student=student)

@app.route('/archive_student/<int:student_id>')
@role_required('admin', 'tutor')
def archive_student(student_id):
    with session_scope() as session:
        student = session.get(Student, student_id)
        if student:
            student.is_archived = True
            session.commit()
            flash(f'–°—Ç—É–¥–µ–Ω—Ç {student.full_name} –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω', 'success')
        else:
            flash('–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
    return redirect(url_for('all_students'))

@app.route('/restore_student/<int:student_id>')
@role_required('admin', 'tutor')
def restore_student(student_id):
    with session_scope() as session:
        student = session.get(Student, student_id)
        if student:
            student.is_archived = False
            session.commit()
            flash(f'–°—Ç—É–¥–µ–Ω—Ç {student.full_name} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'success')
        else:
            flash('–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
    return redirect(url_for('all_students', archived='true'))

@app.route('/edit_lesson/<int:lesson_id>', methods=['GET', 'POST'])
@role_required('admin', 'tutor')
def edit_lesson(lesson_id):
    with session_scope() as session:
        lesson = session.get(Lesson, lesson_id)
        if not lesson:
            flash('–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
            return redirect(url_for('all_lessons'))
        
        if request.method == 'POST':
            lesson.date_time = datetime.strptime(request.form['date_time'], '%Y-%m-%dT%H:%M')
            lesson.status = request.form['status']
            lesson.topic_covered = request.form.get('topic_covered', '').strip()
            lesson.video_link = request.form.get('video_link', '').strip()
            lesson.video_status = request.form.get('video_status', 'pending')
            
            next_lesson_str = request.form.get('next_lesson_date', '').strip()
            if next_lesson_str:
                try:
                    lesson.next_lesson_date = datetime.strptime(next_lesson_str, '%Y-%m-%dT%H:%M')
                except ValueError:
                    lesson.next_lesson_date = None
            else:
                lesson.next_lesson_date = None
            
            session.commit()
            flash('–£—Ä–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω!', 'success')
            return redirect(url_for('all_lessons'))
        
        students = session.query(Student).filter_by(is_archived=False).order_by(Student.full_name).all()
        return render_template('edit_lesson.html', lesson=lesson, students=students)

@app.route('/delete_lesson/<int:lesson_id>')
@role_required('admin', 'tutor')
def delete_lesson(lesson_id):
    with session_scope() as session:
        lesson = session.get(Lesson, lesson_id)
        if lesson:
            student_name = lesson.student.full_name
            session.delete(lesson)
            session.commit()
            flash(f'–£—Ä–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–∞ {student_name} —É–¥–∞–ª–µ–Ω', 'success')
        else:
            flash('–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
    return redirect(url_for('all_lessons'))

@app.route('/add_homework/<int:student_id>', methods=['GET', 'POST'])
@role_required('admin', 'tutor')
def add_homework(student_id):
    with session_scope() as session:
        student = session.get(Student, student_id)
        if not student:
            flash('–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
            return redirect(url_for('all_students'))
        
        if request.method == 'POST':
            homework = Homework(
                student_id=student_id,
                description=request.form['description'],
                due_date=datetime.strptime(request.form['due_date'], '%Y-%m-%d') if request.form['due_date'] else None
            )
            session.add(homework)
            session.commit()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
            if student.telegram_chat_id and student.receive_notifications:
                from main_tg import send_notification
                due_text = f" –¥–æ {homework.due_date.strftime('%d.%m.%Y')}" if homework.due_date else ""
                send_notification(
                    student.telegram_chat_id,
                    f"üìù –ù–æ–≤–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ{due_text}:\n\n{homework.description}"
                )
            
            flash('–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!', 'success')
            return redirect(url_for('view_student_card', student_id=student_id))
        
        return render_template('add_homework.html', student=student)

@app.route('/pending_homeworks')
@role_required('admin', 'tutor')
def pending_homeworks():
    with session_scope() as session:
        pending_homeworks = session.query(Homework).filter(
            Homework.submitted_date.isnot(None),
            Homework.is_confirmed_by_tutor == False
        ).order_by(Homework.submitted_date.desc()).all()
        
        return render_template('pending_homeworks.html', pending_homeworks=pending_homeworks)

@app.route('/confirm_homework/<int:homework_id>')
@role_required('admin', 'tutor')
def confirm_homework(homework_id):
    with session_scope() as session:
        homework = session.get(Homework, homework_id)
        if homework and homework.submitted_date and not homework.is_confirmed_by_tutor:
            homework.is_confirmed_by_tutor = True
            session.commit()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
            student = homework.student
            if student.telegram_chat_id and student.receive_notifications:
                from main_tg import send_notification
                send_notification(
                    student.telegram_chat_id,
                    f"‚úÖ –í–∞—à–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –∏ –ø—Ä–∏–Ω—è—Ç–æ!\n\n"
                    f"–ó–∞–¥–∞–Ω–∏–µ: {homework.description}"
                )
            
            flash('–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!', 'success')
        else:
            flash('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è', 'error')
    
    return redirect(url_for('pending_homeworks'))

@app.route('/statistics')
@role_required('admin', 'tutor')
def statistics():
    with session_scope() as session:
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_students = session.query(Student).filter_by(is_archived=False).count()
        total_lessons = session.query(Lesson).count()
        completed_lessons = session.query(Lesson).filter_by(status='–ø—Ä–æ–≤–µ–¥–µ–Ω').count()
        pending_homeworks = session.query(Homework).filter(
            Homework.submitted_date.isnot(None),
            Homework.is_confirmed_by_tutor == False
        ).count()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
        from sqlalchemy import extract
        current_month_lessons = session.query(Lesson).filter(
            extract('month', Lesson.date_time) == datetime.now().month,
            extract('year', Lesson.date_time) == datetime.now().year
        ).count()
        
        stats = {
            'total_students': total_students,
            'total_lessons': total_lessons,
            'completed_lessons': completed_lessons,
            'pending_homeworks': pending_homeworks,
            'current_month_lessons': current_month_lessons,
            'completion_rate': round(completed_lessons / total_lessons * 100, 1) if total_lessons > 0 else 0
        }
        
        return render_template('statistics.html', stats=stats)

@app.route('/manage_users')
@role_required('admin')
def manage_users():
    with session_scope() as session:
        users = session.query(User).all()
        return render_template('manage_users.html', users=users)

@app.route('/create_user', methods=['GET', 'POST'])
@role_required('admin')
def create_user():
    if request.method == 'POST':
        username = request.form['username']
        email = request.form['email']
        password = request.form['password']
        role = request.form['role']
        student_id = request.form.get('student_id') if role == 'student' else None
        
        with session_scope() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
            if session.query(User).filter_by(username=username).first():
                flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'error')
                return render_template('create_user.html')
            
            if session.query(User).filter_by(email=email).first():
                flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'error')
                return render_template('create_user.html')
            
            user = User(username=username, email=email, role=role)
            user.set_password(password)
            user.is_approved = True  # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–µ—Ç —É–∂–µ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            
            if role == 'student' and student_id:
                user.student_id = int(student_id)
            
            session.add(user)
            session.commit()
            
            flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω!', 'success')
            return redirect(url_for('manage_users'))
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –±–µ–∑ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    with session_scope() as session:
        # –ü–æ–ª—É—á–∞–µ–º ID —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã
        student_ids_with_accounts = session.query(User.student_id).filter(User.student_id.isnot(None)).all()
        student_ids_with_accounts = [id[0] for id in student_ids_with_accounts]
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –±–µ–∑ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        students_without_accounts = session.query(Student).filter(
            ~Student.id.in_(student_ids_with_accounts)
        ).all()
        
        return render_template('create_user.html', students=students_without_accounts)

@app.route('/edit_user/<int:user_id>', methods=['GET', 'POST'])
@role_required('admin')
def edit_user(user_id):
    with session_scope() as session:
        user = session.get(User, user_id)
        if not user:
            flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
            return redirect(url_for('manage_users'))
        
        if request.method == 'POST':
            user.username = request.form['username']
            user.email = request.form['email']
            
            # –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
            new_password = request.form.get('password', '').strip()
            if new_password:
                user.set_password(new_password)
            
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
            if user.role != 'admin':
                user.role = request.form['role']
                
                # –ï—Å–ª–∏ —Ä–æ–ª—å —Å—Ç—É–¥–µ–Ω—Ç, –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ —Å—Ç—É–¥–µ–Ω—Ç—É
                if user.role == 'student':
                    student_id = request.form.get('student_id')
                    if student_id:
                        user.student_id = int(student_id)
                else:
                    user.student_id = None
            
            session.commit()
            flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω!', 'success')
            return redirect(url_for('manage_users'))
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –±–µ–∑ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Ñ–æ—Ä–º—ã
        student_ids_with_accounts = session.query(User.student_id).filter(User.student_id.isnot(None)).all()
        student_ids_with_accounts = [id[0] for id in student_ids_with_accounts]
        
        students_without_accounts = session.query(Student).filter(
            ~Student.id.in_(student_ids_with_accounts)
        ).all()
        
        return render_template('edit_user.html', user=user, students=students_without_accounts)

@app.route('/toggle_user_status/<int:user_id>')
@role_required('admin')
def toggle_user_status(user_id):
    with session_scope() as session:
        user = session.get(User, user_id)
        if user and user.role != 'admin':  # –ù–µ–ª—å–∑—è –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            user.is_active = not user.is_active
            session.commit()
            status = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" if user.is_active else "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
            flash(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} {status}', 'success')
        else:
            flash('–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', 'error')
    return redirect(url_for('manage_users'))

@app.route('/delete_user/<int:user_id>')
@role_required('admin')
def delete_user(user_id):
    with session_scope() as session:
        user = session.get(User, user_id)
        if user and user.role != 'admin':  # –ù–µ–ª—å–∑—è —É–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            username = user.username
            session.delete(user)
            session.commit()
            flash(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É–¥–∞–ª–µ–Ω', 'success')
        else:
            flash('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', 'error')
    return redirect(url_for('manage_users'))

@app.route('/approve_user/<int:user_id>')
@role_required('admin')
def approve_user(user_id):
    with session_scope() as session:
        user = session.get(User, user_id)
        if user and user.role == 'tutor':
            user.is_approved = True
            session.commit()
            flash(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} –æ–¥–æ–±—Ä–µ–Ω', 'success')
        else:
            flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º', 'error')
    return redirect(url_for('manage_users'))

@app.route('/pending_approvals')
@role_required('admin')
def pending_approvals():
    with session_scope() as session:
        pending_users = session.query(User).filter_by(role='tutor', is_approved=False).all()
        return render_template('pending_approvals.html', users=pending_users)

@app.route('/delete_student/<int:student_id>')
@role_required('admin', 'tutor')
def delete_student(student_id):
    with session_scope() as session:
        student = session.get(Student, student_id)
        if student:
            student_name = student.full_name
            session.delete(student)
            session.commit()
            flash(f'–°—Ç—É–¥–µ–Ω—Ç {student_name} –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã', 'success')
        else:
            flash('–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
    return redirect(url_for('all_students'))

@app.route('/cancel_lesson_web/<int:lesson_id>')
@role_required('admin', 'tutor')
def cancel_lesson_web(lesson_id):
    with session_scope() as session:
        lesson = session.get(Lesson, lesson_id)
        if lesson:
            lesson.status = '–æ—Ç–º–µ–Ω–µ–Ω'
            session.commit()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
            student = lesson.student
            if student.telegram_chat_id and student.receive_notifications:
                from main_tg import send_notification
                lesson_time = lesson.date_time.strftime('%d.%m.%Y –≤ %H:%M')
                send_notification(
                    student.telegram_chat_id,
                    f"‚ùå –ó–∞–Ω—è—Ç–∏–µ {lesson_time} –æ—Ç–º–µ–Ω–µ–Ω–æ.\n"
                    f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
                )
            
            flash(f'–£—Ä–æ–∫ —Å {student.full_name} –æ—Ç–º–µ–Ω–µ–Ω', 'success')
        else:
            flash('–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
    
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Ç—É–¥–∞, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏
    next_page = request.args.get('next', url_for('today_lessons'))
    return redirect(next_page)

@app.route('/edit_student_lessons_count/<int:student_id>', methods=['POST'])
@role_required('admin', 'tutor')
def edit_student_lessons_count(student_id):
    with session_scope() as session:
        student = session.get(Student, student_id)
        if student:
            try:
                new_count = int(request.form['lessons_count'])
                student.lessons_count = new_count
                session.commit()
                flash('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!', 'success')
            except ValueError:
                flash('–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤', 'error')
        else:
            flash('–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
    return redirect(url_for('view_student_card', student_id=student_id))

@app.route('/toggle_student_notifications/<int:student_id>', methods=['POST'])
@role_required('admin', 'tutor')
def toggle_student_notifications(student_id):
    with session_scope() as session:
        student = session.get(Student, student_id)
        if student:
            student.receive_notifications = not student.receive_notifications
            session.commit()
            status = "–≤–∫–ª—é—á–µ–Ω—ã" if student.receive_notifications else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
            flash(f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {student.full_name} {status}', 'success')
        else:
            flash('–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
    return redirect(url_for('view_student_card', student_id=student_id))

@app.route('/add_payment/<int:student_id>', methods=['GET', 'POST'])
@role_required('admin', 'tutor')
def add_payment(student_id):
    with session_scope() as session:
        student = session.get(Student, student_id)
        if not student:
            flash('–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
            return redirect(url_for('all_students'))
        
        if request.method == 'POST':
            try:
                payment = Payment(
                    student_id=student_id,
                    amount=float(request.form['amount']),
                    description=request.form.get('description', '').strip(),
                    payment_date=datetime.strptime(request.form['payment_date'], '%Y-%m-%d') if request.form['payment_date'] else datetime.now()
                )
                session.add(payment)
                session.commit()
                
                flash('–ü–ª–∞—Ç–µ–∂ –¥–æ–±–∞–≤–ª–µ–Ω!', 'success')
                return redirect(url_for('view_student_card', student_id=student_id))
            except ValueError:
                flash('–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞', 'error')
        
        return render_template('add_payment.html', student=student, today=datetime.now().strftime('%Y-%m-%d'))

@app.route('/students_homeworks/<int:student_id>')
@role_required('admin', 'tutor')
def students_homeworks(student_id):
    with session_scope() as session:
        student = session.get(Student, student_id)
        if not student:
            flash('–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
            return redirect(url_for('all_students'))
        
        homeworks = session.query(Homework).filter_by(student_id=student_id).order_by(Homework.due_date.desc()).all()
        
        return render_template('students_homeworks.html', student=student, homeworks=homeworks)

@app.route('/edit_homework/<int:homework_id>', methods=['GET', 'POST'])
@role_required('admin', 'tutor')
def edit_homework(homework_id):
    with session_scope() as session:
        homework = session.get(Homework, homework_id)
        if not homework:
            flash('–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', 'error')
            return redirect(url_for('pending_homeworks'))
        
        if request.method == 'POST':
            homework.description = request.form['description']
            homework.due_date = datetime.strptime(request.form['due_date'], '%Y-%m-%d') if request.form['due_date'] else None
            session.commit()
            
            flash('–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!', 'success')
            return redirect(url_for('students_homeworks', student_id=homework.student_id))
        
        return render_template('edit_homework.html', homework=homework)

@app.route('/add_parent/<int:student_id>', methods=['GET', 'POST'])
@role_required('admin', 'tutor')
def add_parent(student_id):
    with session_scope() as session:
        student = session.get(Student, student_id)
        if not student:
            flash('–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
            return redirect(url_for('all_students'))
        
        if request.method == 'POST':
            parent = Parent(
                student_id=student_id,
                telegram_chat_id=request.form['telegram_chat_id']
            )
            try:
                session.add(parent)
                session.commit()
                flash('–†–æ–¥–∏—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω!', 'success')
                return redirect(url_for('view_student_card', student_id=student_id))
            except Exception as e:
                flash('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª—è (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)', 'error')
        
        return render_template('add_parent.html', student=student)

@app.route('/invite_student/<int:student_id>')
@role_required('admin', 'tutor')
def invite_student(student_id):
    with session_scope() as session:
        student = session.get(Student, student_id)
        if not student:
            flash('–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
            return redirect(url_for('all_students'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫–∫–∞—É–Ω—Ç —É —Å—Ç—É–¥–µ–Ω—Ç–∞
        existing_account = session.query(User).filter_by(student_id=student_id).first()
        if existing_account:
            flash('–£ —ç—Ç–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ —É–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç', 'error')
            return redirect(url_for('view_student_card', student_id=student_id))
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
        invitation = Invitation(
            email=f"student{student_id}@example.com",  # –í—Ä–µ–º–µ–Ω–Ω—ã–π email
            role='student',
            student_id=student_id,
            created_by=flask_session['user_id'],
            expires_at=datetime.now() + timedelta(days=7)
        )
        invitation.generate_token()
        session.add(invitation)
        session.commit()
        
        invite_url = url_for('register', token=invitation.token, _external=True)
        flash(f'–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ! –°—Å—ã–ª–∫–∞: {invite_url}', 'success')
        
    return redirect(url_for('view_student_card', student_id=student_id))

@app.route('/confirm_homework_tutor/<int:homework_id>')
@role_required('admin', 'tutor')
def confirm_homework_tutor(homework_id):
    with session_scope() as session:
        homework = session.get(Homework, homework_id)
        if homework and homework.submitted_date and not homework.is_confirmed_by_tutor:
            homework.is_confirmed_by_tutor = True
            homework.completed_date = datetime.now()
            session.commit()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
            student = homework.student
            if student.telegram_chat_id and student.receive_notifications:
                from main_tg import send_notification
                send_notification(
                    student.telegram_chat_id,
                    f"‚úÖ –í–∞—à–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –∏ –ø—Ä–∏–Ω—è—Ç–æ!\n\n"
                    f"–ó–∞–¥–∞–Ω–∏–µ: {homework.description}"
                )
            
            flash('–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!', 'success')
        else:
            flash('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è', 'error')
    
    return redirect(url_for('students_homeworks', student_id=homework.student_id))

@app.route('/mark_homework_incomplete/<int:homework_id>')
@role_required('admin', 'tutor')
def mark_homework_incomplete(homework_id):
    with session_scope() as session:
        homework = session.get(Homework, homework_id)
        if homework:
            homework.is_completed = False
            homework.is_confirmed_by_tutor = False
            homework.submitted_date = None
            homework.student_comment = ""
            session.commit()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
            student = homework.student
            if student.telegram_chat_id and student.receive_notifications:
                from main_tg import send_notification
                send_notification(
                    student.telegram_chat_id,
                    f"‚ùå –í–∞—à–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ.\n\n"
                    f"–ó–∞–¥–∞–Ω–∏–µ: {homework.description}"
                )
            
            flash('–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ', 'success')
        else:
            flash('–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', 'error')
    
    return redirect(url_for('students_homeworks', student_id=homework.student_id))

@app.route('/mark_homework_completed_web/<int:homework_id>')
@role_required('admin', 'tutor')
def mark_homework_completed_web(homework_id):
    with session_scope() as session:
        homework = session.get(Homework, homework_id)
        if homework:
            homework.is_completed = True
            homework.is_confirmed_by_tutor = True
            homework.completed_date = datetime.now()
            if not homework.submitted_date:
                homework.submitted_date = datetime.now()
            session.commit()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
            student = homework.student
            if student.telegram_chat_id and student.receive_notifications:
                from main_tg import send_notification
                send_notification(
                    student.telegram_chat_id,
                    f"‚úÖ –í–∞—à–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ!\n\n"
                    f"–ó–∞–¥–∞–Ω–∏–µ: {homework.description}"
                )
            
            flash('–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ', 'success')
        else:
            flash('–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', 'error')
    
    return redirect(url_for('students_homeworks', student_id=homework.student_id))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
def create_default_admin():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not check_and_migrate_if_needed():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        return False
    
    try:
        with session_scope() as session:
            admin = session.query(User).filter_by(role='admin').first()
            if not admin:
                admin = User(
                    username='admin',
                    email='admin@tutorapp.com',
                    role='admin',
                    is_approved=True
                )
                admin.set_password('admin123')
                session.add(admin)
                session.commit()
                print("–°–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: admin / admin123")
            return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        return False

if __name__ == '__main__':
    create_default_admin()
    app.run(debug=True, port=5000)